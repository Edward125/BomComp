!!!!    4    0    1 1192216008   0000                                         
! Testplan for 07212-1  Fri Oct 12 11:06:49 2007

! 07212-1

!   AGILENT 3070 STANDARD TESTMAIN       Revision: "3070 05.30p 0603(full)"
!   STANDARD VERSION
!##############################################################################
!   This "main" program sequences execution of testplan subroutines and
!   assumes that the current working directory is already set to the
!   appropriate board directory.
!   This testmain has included the code to support the following optional
!   features:
!        Data Logging for PushButton QSTATS, QSTATS-II and ART
!        Chek-Point (pin tests)
!        Boundary Scan:  Interconnect Plus & ScanWorks
!   Once the testplan is working, you may selectively enable
!   any combination of the features by changing the 'flag' variables
!   in the subroutine "Set_Custom_Options".  Use the following command:
!         find  "!   Other"&" parameters"  ! takes you to option settings
!
!   Turn learn on and run the testplan on a known good board.  After the
!   learning run is successfully completed, the testplan is ready for
!   customization, debug and production testing.
!   Analog limits are logged by standard testmain if and only if the
!   learn flag is on.  Limits must be logged once each time they change
!   in order for PushButton Q-STATS or Q-STATS II to produce histograms.
!
!   If flash is to be programmed on this board, the testplan needs to have the
!   locations marked !flash! modified or reviewed.  Please review the flash
!   manual for full explanation. Key elements include:
!
!   full disabling of buses and upstream control lines is required for safety
!   use ID check for digital test subroutine to ensure proper part placement
!   Cycle power if required to three-state upstream devices

! Miscellaneous string variable size declarations:
dim InvOn$[5], InvOff$[4]
dim Testmain_Revision$[70]
dim Batch$[12], Oper$[25], Testplan$[14], Testrev$[4]
dim Board$[14], Board_Rev$[14], Known_Good$[1]
dim Proc_Step$[5], Log_Path$[80]
! The following is used in the power-supply setup routine for parallel
! power supplies.  It holds masks for comparison.
dim Psgroup(1:16)
option bit 32     ! Prevents range error when comparing Psgroup with MSB set

!       INITIALIZE BREAK AND ERROR TRAPPING

on break recover Break_Trap
on error recover Error_Trap

!       INITIALIZE VARIABLES

call Initializations

!       SET UP FAILURE ACKNOWLEDGMENT
acknowledge all failures

!       MAIN LOOP FOR REPEATEDLY TESTING A BOARD
!          (executed only once if "learning")

Wait_For_Start:

Pass_Fail_Reported = False
Logging_Started = False
Tests_On_This_Board = 0
print | print Place_Board_Prompt$
wait for start
if Serializing then
  print using "@"
  Serial$ = fn Get_Serial_Num$(Serial_Prompt$)
  Known_Good$ = "n"
  if Serial$ = Known_Good_Board$ then Known_Good$ = "y"
  if Using_AwareTest = True then
    ! remove special characters
    Serial_New$ = fn Remove_Special_Characters$(Serial$)
    Path$ = Serial_Number_Directory$ & Serial_New$ & Serial_Suffix$
    enter Path$,, Err

    !! Added the following code to check for all uppercase or all lowercase
    !! serial numbers.
    if Err then
       Path$ = Serial_Number_Directory$ & upc$(Serial_New$) & Serial_Suffix$
       enter Path$,, Err
       if Err then
          Path$ = Serial_Number_Directory$ & lwc$(Serial_New$) & Serial_Suffix$
          enter Path$,, Err
       end if
    end if

    if Err then
      ! serial number file was not found -- board was not tested on AXI
      if AXI_Tested_Override = False then
        print Not_AXI_Tested$
        goto Wait_For_Start
      else
        ! Add custom code here if serial number is missing and
        ! you do not want to completely skip the PC board test
      end if
    end if
  end if
end if
if Using_Multiple_Versions and Version_Prompting = Per_Board then
  call Get_Version_Label
  if nrun = 1 or Version_Inits_Needed then
    call Do_Version_Inits
  end if
end if

!       RE-TEST AFTER PIN-TEST FAILURE

ChekPoint_Retry:

print using "@,/"
if Serializing then print But$; Serial$
Tests_On_This_Board = Tests_On_This_Board + 1
if Tests_On_This_Board > 1 then print Rep_Test$

!       START LOGGING FOR THIS BOARD

report is Report_Printer$
if Logging then call Start_Logging
Logging_Started = True   ! Also used as reporting flag

!       ACTIVATE VACUUM IN PREPARATION FOR TEST

if Tests_On_This_Board = 1 then faon 1.5
! Warning: Reducing the value for 'faon' from the default value of 1.5
! can potentially cause testhead damage.


!       CHECK FIXTURE CONTACT, THEN
!       LEARN OR TEST (OR RE-TEST) BOARD

unpowered
if (not learning) and Chek_Point_Mode = Pretest then
  if not fn Chek_Point_OK then goto Cleanup
end if
call Test_Sections

!       IF ANY BOARD FAILED TEST, TRY TO FIX IT BY RUNNING PIN TEST

Cleanup:

if boardfailed and Status <> Failed_In_Preshorts then
  if Tests_On_This_Board = 1 and Chek_Point_Mode = Failures then
    unpowered
    if fn Chek_Point_OK then goto ChekPoint_Retry
  end if
end if

!       REMOVE BOARD FROM TESTHEAD AND GENERATE PASS/FAIL MESSAGE
!       THEN TERMINATE LOGGING (IF ENABLED) AND REPORTING

faoff
Pass_Fail_Reported = True

Eject_Ticket: image 13/

if boardfailed then
  print "     **  ";Fail_Msg$;"  **"
  copy Fail_File$ over "/dev/tty"
  if Status = Failed_Pin_Test then
    print " ** ";Pin_Msg$;" **"
  end if
  if learning then Status = Failed_In_Learn
  if Serializing then report Serial_Nr$ & Serial$
  report using Eject_Ticket
  if Using_Buffered_Reporting then report out
else
  print "     **  ";Pass_Msg$;"  **"
  copy Pass_File$ over "/dev/tty"
  if Using_AwareTest = True then
    enter Path$,, Err  ! check to see if serial number file exists
                       ! Err = 100009 (File Not Found)
    if not Err then    ! Do not create new serial number files
      enter "date +%Y%m%d%H%M |"; Passed_Datetime$
      assign @SNF,Err to Path$; write, append
      if Err then      ! problems writing to serial number file
        print SNF_Error_Msg$  |   print "    ";errm$
        beep
        ! print | print Stop_Msg$
        ! stop
      else
        output @SNF; "passed3070 = " & Passed_Datetime$
        assign @SNF to *
      end if
    end if
  end if
end if
report is *
if Logging then
  log board end Status
  log out Log_Path$ & datetime$ & System$ & th$
  log clear
end if
report clear
clear failures
Logging_Started = False

!       END PROGRAM IF LEARNING. OTHERWISE RETURN TO MAIN LOOP

if learning then
   learn off
   print | print Learning_Off_Msg$ | print Stop_Msg$
   beep
   stop
end if
goto Wait_For_Start

!       END OF MAIN LOOP
!       INTERRUPT HANDLING
! This is the normal entry for Break/Stop detection

Break_Trap:

off break
off error
print "     ";Break_Msg$
unpowered,Err
if Err then print errmlong$
if Logging and Logging_Started then
  log board end Break_Code
  log out Log_Path$ & datetime$ & System$ & th$
  log clear
end if
faoff, Err
if Err then print errmlong$
goto Abort

! This is the normal entry for errors occurring in Basic statements

Error_Trap:
off error
print errmlong$
beep
SaveErrn = errn
unpowered,Err
if Err then print errmlong$

!       IF A BOARD IS PRESENT, FAIL IT
!       THEN TERMINATE LOGGING (IF ENABLED) AND REPORTING

if Logging_Started and not Pass_Fail_Reported then
  fail device
  report Board_Not_Tested$
  print "     **  ";Fail_Msg$;"  **"
  copy Fail_File$ over "/dev/tty"
  if Status = Failed_Pin_Test then
    print " ** ";Pin_Msg$;" **"
  end if
  if Serializing then report Serial_Nr$ & Serial$
  report using Eject_Ticket
  if Using_Buffered_Reporting then report out, Err
  report is *, Err
  report clear
end if
if Logging_Started and Logging then
  log using """{@RPT~80|"",80a,""}""" ; errm$(SaveErrn)
  log board end Error_Code, SaveErrn
  log out Log_Path$ & datetime$ & System$ & th$
  log clear
end if

!       REMOVE THE BOARD FROM THE TESTHEAD

faoff, Err
if Err then print errmlong$
if learning or Err then goto Abort
on error recover Error_Trap
goto Wait_For_Start

!       ABORT PROGRAM: UNRECOVERABLE ERROR, LEARN ERROR OR STOP KEY

Abort:

off break
off error
report is *, Err
log is *, Err
beep
if (nrun=1) and not Did_First_Run_Inits then
  print No_Init_Warning$
  clear nrun
else
  if Version_Inits_Needed then
    print No_Version_Init_Warning$
    clear nrun
  end if
end if
print "     ";Stop_Msg$
beep
stop
end

!       END OF ERROR TRAPS

!       Test/Learn Sections
!    [ Assumes unpowered mode. ]
! Note concerning LEARN MODE:  some sections are not truly "learned" but are
! run in learn mode for other reasons.  For example, analog tests may be run
! in learn mode in order to log limits information used by Pushbutton QSTATS,
! and preshorts/shorts are run "just in case" -- to avoid bad learns & damage.
! To keep a section from being run in learn mode, place 'if not learning then'
! just before that section and place 'end if' just after it.
!##############################################################################
sub Test_Sections
global PreshortsMsg$, ShortsMsg$, PowerMsg$, DigitalMsg$, AnalogMsg$
global DigitalFuncMsg$, AnalogPoweredMsg$, BScanIncktMsg$, BScanIntconMsg$
global Status, Failed_In_Preshorts, Failed_In_Shorts, Failed_In_Functional
global Failed_In_Digital, Failed_In_Power_Supplies, Failed_In_Analog
global Logging, True, False, Passed
global Mode$, Failed_In_BScan
global TestJetMsg$, Failed_In_TestJet
global PolarityMsg$, Failed_In_Polarity_Check
global BScanPShortsMsg$
global ConnectCheckMsg$, Failed_In_ConnectCheck
global Failed_In_Flash, FlashProgMsg$, Programming
global AnalogClusterMsg$, Failed_In_Analog_Cluster
global BScanSiNailsMsg$, Failed_In_BScan_SiNails
global SW_ScanPathVerifyMsg$, Failed_In_SW_Testing
global SW_DrVerifyMsg$, SW_IrVerifyMsg$
global SW_InterconnectMsg$, SW_MemInterconnectMsg$
global SW_ClusterMsg$, SW_MemBistMsg$
global SW_ProgrammingMsg$, Failed_In_SW_Programming
global SW_FlashMsg$, Failed_In_SW_Flash

call Pre_Shorts (Failed_In_Preshorts, Mode$ & PreshortsMsg$)
if boardfailed then subexit

call Shorts (Failed_In_Shorts, Mode$ & ShortsMsg$)
if boardfailed then subexit

if Logging or not learning then
  call Analog_Tests (Failed_In_Analog, Mode$ & AnalogMsg$)
  if boardfailed then subexit
end if

call TestJet (Failed_In_TestJet, Mode$ & TestJetMsg$)
if boardfailed then subexit

call Polarity_Check (Failed_In_Polarity_Check, Mode$ & PolarityMsg$)
if boardfailed then subexit

call Connect_Check (Failed_In_ConnectCheck, Mode$ & ConnectCheckMsg$)
if boardfailed then subexit

call Analog_Cluster_Tests (Failed_In_Analog_Cluster, Mode$ & AnalogClusterMsg$)
if boardfailed then subexit

powered

call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Scan_Path_Verify_Tests (Failed_In_SW_Testing, Mode$ & SW_ScanPathVerifyMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Pretest
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call BScan_Powered_Shorts_Tests (Failed_In_Shorts, Mode$ & BScanPShortsMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call BScan_Interconnect_Tests (Failed_In_BScan, Mode$ & BScanIntconMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

!If you:
!       * use both ScanWorks and 3070 InterconnectPlus chain tests
! AND   * comment out any 3070 interconnect tests (e.g. duplicate coverage)
! AND   * those commented tests have unnailed nodes (possible undetected shorts)
!THEN   * Move the following BScan_Incircuit_Tests routine below the ScanWorks 
!               Interconnect_Tests call

!Reason: an interconnect test, which finds shorts, should be run on each chain prior to
!the BScan_Incircuit_Tests routine.  The connect tests give precise opens diagnostics,
!but board damage from undetected shorts could occur while they are being run. 

call BScan_Incircuit_Tests (Failed_In_BScan, Mode$ & BScanIncktMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Interconnect_Tests (Failed_In_SW_Testing, Mode$ & SW_InterconnectMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call BScan_Silicon_Nails_Tests (Failed_In_BScan_SiNails, Mode$ & BScanSiNailsMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

! If you are using Boundary-Scan and you want to cycle power,
! then uncomment the following call.
! call Reset_Board

call Digital_Tests (Failed_In_Digital, Mode$ & DigitalMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Mem_Interconnect_Tests (Failed_In_SW_Testing, Mode$ & SW_MemInterconnectMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Cluster_Tests (Failed_In_SW_Testing, Mode$ & SW_ClusterMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call ScanWorks_Mem_BIST (Failed_In_SW_Testing, Mode$ & SW_MemBistMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

! If you are using Boundary-Scan and you want to cycle power,
! then uncomment the following call.
! call Reset_Board

call Functional_Tests (Failed_In_Functional, Mode$ & DigitalFuncMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

call Analog_Functional_Tests (Failed_In_Functional, Mode$ & AnalogPoweredMsg$)
if boardfailed then
  call Disconnect_Power_On_Board
  subexit
end if

if Programming then
  if learning then subexit

  !----------------------------------------------------------------------------
  ! Only add the following powersupply setup if it is necessary to cycle power.
  ! Perhaps to get FPGAs or other ASICs to a three-state condition.
  !
  !    !flash! unpowered  ! Only if volatile logic exists upstream
  !
  !    !flash!  put any required gprelays here
  !
  !    !flash!  powered    ! if unpowered above, also use the following only if
  !                        ! digital devices aren't interferring
  !    ! call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
  !    ! if boardfailed then
  !    !    call Disconnect_Power_On_Board
  !    !    subexit
  !    ! end if
  !----------------------------------------------------------------------------
  ! Add the device name to be tested in the call to the Program_Flash
  ! subroutine. If multiple devices are installed, duplicate the call line for
  ! each device.  Pass an empty string as the Message$ parameter to supress
  ! printing messages for devices 2 through N.
  !----------------------------------------------------------------------------

  ! call Program_Flash ("", Failed_In_Flash, FlashProgMsg$)
  if boardfailed then
    call Disconnect_Power_On_Board
    subexit
  end if

  call ScanWorks_Device_Programming (Failed_In_SW_Programming, SW_ProgrammingMsg$)
  if boardfailed then
    call Disconnect_Power_On_Board
    subexit
  end if

  call ScanWorks_Flash_Programming (Failed_In_SW_Flash, SW_FlashMsg$)
  if boardfailed then
    call Disconnect_Power_On_Board
    subexit
  end if
end if

Status = Passed
subend

!       Pin Test Subroutines

!##############################################################################
def fn Chek_Point_OK
! This is the subroutine for forcing the testing of pin contacts.
! If this routine is called before Test_sections (Chek_Point_Mode = Pretest),
! then the internal status will be set to Passed or Failed_Pin_Test.
! If this routine is called after test (Chek_Point_Mode = Failures), then the
! internal status is modified only if failures occur.
!
! The meaning of the function is slightly different when it is called before
! test versus after test.  If called before test, the function returns True
! if, no matter how many times it was cycled, pin test did finally pass.
! If called after test, the function returns True if pin test failed but
! passed after retry.
!
! Note: fn Pinsfailed is external to testmain.
!
global Pin_Msg$, Passed, Chek_Point_Msg$
global Retry_PinTest$, Recycle_Vacuum$, Status, True, False
global Cycle_Vacuum$, Failed_Pin_Test, Max_Times_To_Fix_Contact
global Logging, Serial$, Known_Good$, Chek_Point_Mode, Pretest, Failures

if learning then return (False)
Attempts = 0
loop
  Contact_Passed = not fn Pinsfailed (Chek_Point_Msg$)
  if not Contact_Passed then
    Status = Failed_Pin_Test
  else
    if Chek_Point_Mode = Pretest then Status = Passed
  end if
  Attempts = Attempts + 1
  exit if Contact_Passed or (Attempts > Max_Times_To_Fix_Contact)
  print Pin_Msg$
  question Retry_PinTest$, Retry
  exit if not Retry
  if Logging and Chek_Point_Mode = Pretest then
    if Status = Failed_Pin_Test then log board end Failed_Pin_Test
  end if
  question Cycle_Vacuum$, Cycle
  if Cycle then
    faoff
    question Recycle_Vacuum$
    faon 1.5
! Warning: Reducing the value for 'faon' from the default value of 1.5
! can potentially cause testhead damage.
    unpowered
  end if
  if Chek_Point_Mode = Pretest then
    clear failures
    if Logging then log board start Serial$, Known_Good$
  end if
end loop
if Chek_Point_Mode = Failures then
  if Contact_Passed and Attempts > 1 then
    if Logging then
      log clear for retest
      log board end Failed_Pin_Test
    end if
    clear failures
    report clear
  end if
  return (Contact_Passed and Attempts > 1)
else
  return (Contact_Passed)
end if
fnend

!       Reset_Board Subroutine

!##############################################################################
sub Reset_Board
   !---------------------------------------------------------------------------
   ! This 'pause' section is placed here to remind the test programmer
   ! that some powered tests may depend upon the TCK/TMS signals of
   ! boundary scan chains/devices being held in a stable state.
   ! When the testplan is run, the tests are properly sequenced
   ! to assure that the disabled state is set; however, board level
   ! circuitry may interfere with the persistence of the disabled state.
   ! You may need to take additional measures; for example, you may
   ! place your own pullup/down resistor in the fixture to assure a
   ! stable TMS and/or TCK, or utilize a GP relay to disable some TCK
   ! oscillator, etc.
   ! For further explanation, see the Boundary-Scan Manual for the
   ! section titled 'Maintaining Persistence of Boundary-Scan Disables'.
   !
   !---------------------------------------------------------------------------
   ! When Boundary-Scan tests are complete, you may need to produce
   ! a hard reset on the board-under-test to bring the ICs back into
   ! operational mode.  One way of doing this is to cycle power to the
   ! board using the following call:

   call Cycle_Power_On_Board ! Cycle Power to reset digital state of board
   ! call ScanWorks_Pretest    ! Configure volatile devices, if needed 

   ! Power cycling is time consuming and may not be necessary.  Some boards
   ! may not need any resetting.  Others may have a digital reset node
   ! you can toggle with a digital test to reset the board.
   !
   ! When you have evaluated the needs of this board and modified this
   ! section, remove the pause and these comments.  You should take care
   ! to document the action you have taken for future reference.
   !---------------------------------------------------------------------------
subend

!       Backtrace Subroutine

!##############################################################################
sub Backtrace (Test$)
global Confirming$, Confirm_Failed$

find start node Test$     ! get first node to probe
loop
  exit if btdone
  if (external test (btnode$)) then ! perform external test
    call External_Test (BT_Pass, BT_Results)
  else
    test node btnode$   ! perform digital functional test
    BT_Pass = nodepass
    BT_Results = noderesults
    call Print_Results (BT_Pass, BT_Results)
  end if
  find next node btnode$, BT_Pass, BT_Results  ! next node to probe
  if btconfirm then      ! confirm the diagnosis
    find next node btnode$, BT_Pass, BT_Results, confirm
    print Confirming$
  end if
  if btreset then        ! restart from new failing node
    find next node btnode$, BT_Pass, BT_Results, reset
    print Confirm_Failed$ & btnode$ & """"
  end if
end loop
make diagnosis  ! report failed node information
subend

!       Sample External Test Subroutine for Backtracing

!##############################################################################
sub External_Test (BT_Pass, BT_Results)
! Sample external test
! Perform test as needed based on value of BT_Key$
! Set Pass=1 for pass or Pass=0 for fail
! Results must be -150000 for an external test
BT_Key$ = exttest$
BT_Pass = 1
BT_Results = -150000
subend

!       Decode and print backtrace node test results

!##############################################################################
sub Print_Results (BT_Pass, BT_Results)
global BT_Passed$, BT_SR_Fail$, BT_CRC_Fail$, BT_Notest$, BT_Indeter$
global BT_Interm$, BT_Incons$, BT_Open$, BT_NResults$

BT_Node$ = "node """ & btnode$ & """"
if BT_Pass then  ! node passed
  print BT_Node$; tab(23); BT_Passed$
else
  if BT_Results > 0 then  ! node failed SR test
    print BT_Node$; tab(23); BT_SR_Fail$; BT_Results
  else
    if BT_Results <= 0 and BT_Results >= -65535 then ! node failed CRC test
      call Decode_crc ( -BT_Results, BT_Crc$ )
      print BT_Node$; tab(23); BT_CRC_Fail$; BT_Crc$; """"
    else
      if BT_Results = -100000 then  ! node not tested
        print BT_Node$; tab(23); BT_Notest$
      else
        if BT_Results = -160000 then  ! node was indeterminate
          print BT_Node$; tab(23); BT_Indeter$
        else
          if BT_Results = -200005 then  ! node was intermittent
            print BT_Node$; tab(23); BT_Interm$
          else
            if BT_Results = -200006 then  ! node was inconsistent
              print BT_Node$; tab(23); BT_Incons$
            else
              if BT_Results = -200010 then  ! node has an open trace
                print BT_Node$; tab(23); BT_Open$
              else
                print BT_Node$; tab(23); BT_NResults$; BT_Results
              end if ! BT_Results = -200010
            end if ! BT_Results = -200006
          end if ! BT_Results = -200005
        end if ! BT_Results = -160000
      end if ! BT_Results = -100000
    end if ! BT_Results < 1 and BT_Results > -100000
  end if ! BT_Results > 0
end if ! BT_Pass
subend

!       Format a 16 bit crc value to an ASCII CRC

!##############################################################################
sub Decode_crc (BT_Value, BT_Crc$)
option bit 32
BT_Crc$ = "0000"
BT_Temp = binand (BT_Value, hti("0000000F"))
BT_Crc$[4;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("000000F0")) / 16
BT_Crc$[3;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("00000F00")) / 256
BT_Crc$[2;1] = chr$(fn HexChar(BT_Temp))
BT_Temp = binand (BT_Value, hti("0000F000")) / 4096
BT_Crc$[1;1] = chr$(fn HexChar(BT_Temp))
subend

!       Build a hex character

!##############################################################################
def fn HexChar (A)
if A >= 0 and A < 10 then
  return (A + 48)
else
  if A >= 10 and A < 16 then
    return  (A + 87)
  else
    return 63
  end if
end if
fnend

!       Data Logging Subroutines

!##############################################################################
sub Start_Logging
global Analog_Sample_Rate, QSTATS_Mode, Histo, Board$, Tests_On_This_Board
global Sampling, True, False
global Proc_Step$, Batch$, Oper$, Board_Rev$, Testplan$
global Testrev$, Known_Good$, Serial$, Version_Label$

Sampling = False
if learning then
  log level is all
else
  if rnd < Analog_Sample_Rate * (QSTATS_Mode = Histo) then
    log level is analog without nhls, pins
    Sampling = True
  else
    log level is indictments without nhls
  end if
end if
print "Log level: ";lli$;";  Report level: ";rli$;";  Board type: ";Board$
PS$ = Proc_Step$
if Tests_On_This_Board = 1 then
  log board Board$, PS$, Batch$, Oper$, Board_Rev$, Testplan$, Testrev$, "", "", Version_Label$
end if
log board start Serial$, Known_Good$
print
subend

!##############################################################################
def fn Get_Serial_Num$(Prompt$)
global Serial_Length, Bad_Serial_Image$, Default_Serial_Number$

loop
  print using """"&Prompt$&""",#"
  Ident$=""
  input "",Ident$
  if Ident$ = "" then Ident$ = Default_Serial_Number$
  exit if Ident$ = Default_Serial_Number$
  exit if (len(Ident$) = Serial_Length) or not Serial_Length
  print using Bad_Serial_Image$; len(Ident$), Serial_Length
end loop
return (Ident$)
! return (lwc$(Ident$))
fnend

!##############################################################################
!  If the Board name contains any invalid characters, stop processing.
sub Verify_Board_Names
global Stop_Msg$, Bad_Board_Name$, Board$

Found_Bad = 0
if fn IllegalChars_In_Board_Name(Board$) then
  Found_Bad = 1
  print Bad_Board_Name$  |   print "    ";Board$
end if
if Found_Bad then
  print | print Stop_Msg$
  beep
  stop
end if
subend

!##############################################################################
! Check to see if the Board name contains any invalid characters, now only
! check spaces.  Return 1 if yes, and 0 if no.
def fn IllegalChars_In_Board_Name (Board$)
global True, False

if len (Board$) > 0 and pos (Board$, " ") > 0  then
  return True
else
  return False
end if
fnend

!##############################################################################
sub Create_Log_Queue
global Log_Path$, Directory_Exists, Queue_Error_Msg$, Stop_Msg$

create dir Log_Path$, Err
Err = Err and (Err <> Directory_Exists)
if Err then
  print Queue_Error_Msg$  |   print "    ";errm$
  print | print Stop_Msg$
  beep
  stop
end if
subend

!##############################################################################
sub Setup_Logging
global Serial$, Default_Serial_Number$, Testplan$, Batch$
global Known_Good_Board$, Using_ART, Proc_Step$, Oper_Id_Prompt$
global Board$, Oper$, Known_Good_Prompt$
global Serializing

randomize
Proc_Step$             = "btest"
Batch$                 = datetime$ ! Set to a unique identifier so that Q-STATS II can
                                   ! calculate interboard handling and system idle times
Testplan$              = Board$
Default_Serial_Number$ = "default_SN" & th$
Serial$                = Default_Serial_Number$
Known_Good_Board$      = ""
Oper$                  = ""
if Using_ART then
  print using """"&Oper_Id_Prompt$&""",#"
  input "",Oper$
end if
if Serializing then Known_Good_Board$ = fn Get_Serial_Num$(Known_Good_Prompt$)
subend

!       Initialization Subroutines

!##############################################################################
sub Initializations
global Logging, Using_Buffered_Reporting, Report_Printer$, Using_ART
global Serializing, Logging_Started, First_Run$, Testmain_Revision$
global Did_First_Run_Inits, QSTATS_Mode
global True, False, Off, No_Histo, Histo, Pretest, Failures
global Version_Inits_Needed, Using_Multiple_Versions
global Per_Run, Per_Board, Version_Prompting
global Using_AwareTest

Testmain_Revision$="3070 05.30p 0603(full)"
True = 1
False = 0
Off = 0
No_Histo = 1
Histo = 2
Pretest = 1
Failures = 2
Per_Run = 1
Per_Board = 2
Version_Inits_Needed = False
call Set_Custom_Options
call Initialize_Board_Constants ! external to testmain
call Initialize_Constants
call Verify_Board_Names
Logging_Started = False
Logging = (QSTATS_Mode <> Off) or Using_ART
if Using_ART then Serializing = True
if Using_AwareTest then Serializing = True

! call Get_Board_Revision        ! to interactively set Board_Rev$

call Print_Startup_Message       ! prints out many variables' values
acknowledge all failures
learn capacitance off
if Using_Buffered_Reporting then
  buffered reporting on
else
  buffered reporting off
end if
report is Report_Printer$
printer is *
if Logging then
  call Setup_Logging
  call Create_Log_Queue
else
  log level is none
end if
if Using_ART then
  report level is all
else
  report level is report
end if
if nrun = 1 then
  print First_Run$
  load board

!'object checking on/off' statement goes here. Default is 'on'
  object checking on
end if
if Using_Multiple_Versions and Version_Prompting = Per_Run then
  call Get_Version_Label
end if
if nrun = 1 or Version_Inits_Needed then
  call Do_Version_Inits
  Did_First_Run_Inits=True
end if
subend

!##############################################################################
sub Print_Startup_Message
global Board$, Board_Rev$, Using_ART, QSTATS_Mode, Histo
global Analog_Sample_Rate, Chek_Point_Mode, Failures
global Report_Printer$, Using_Buffered_Reporting, Testmain_Revision$
global Serializing, Serial_Length

print using "@,2/"
print "BOARD TYPE"
print "  Name:     ";Board$
print "  Revision: ";Board_Rev$
print "AGILENT 3070 TESTMAIN"
print "  Report Printer: ";Report_Printer$
print "  Revision:       ";Testmain_Revision$
!   Build list of options to be printed
!     O1$ is first line, O2$ is second line
O1$ =  "  Options: "
if Using_ART then O1$=O1$&" PR+"
if QSTATS_Mode then O1$=O1$&" QSTATS"
if Chek_Point_Mode then
  O1$=O1$&" Chek-Point"
  if Chek_Point_Mode = Failures then
    O1$=O1$&"-Failures"
  else
    O1$=O1$&"-Pretest"
  end if
end if
if (O1$="  Options: ") then
  O2$=O1$
else
  print O1$
  O2$= "           "
end if
if Serializing then O2$=O2$&" Serializing("&val$(Serial_Length)&")"
if learning then O2$=O2$&" LEARNING"
if Using_Buffered_Reporting then O2$=O2$&" Buffered-Reporting"
if QSTATS_Mode = Histo then
  O2$=O2$&" Histograms("&val$(Analog_Sample_Rate)&")"
end if
if not (O2$ = "           ") then print O2$
print using "3/"
subend

!##############################################################################
sub Get_Board_Revision
global Board_Rev$, Board_Rev_Prompt$

if Board_Rev$ = "" then
  print using """" & Board_Rev_Prompt$ & """,#"
  input "",Board_Rev$
end if
subend

!##############################################################################
sub Do_Version_Inits
global Version_Inits_Needed, Chek_Point_Mode, True, False, Off, Logging

unpowered
faoff
call Characterize
if Chek_Point_Mode <> Off then   ! preload pins into testhead memory
  Log_Level_Reset = False
  if lli$ = "all" then
    log level is none            ! turn off digital datalogging
    Log_Level_Reset = True       ! for 'ignore all failures'
  end if
  ignore all failures
  Err = fn Pinsfailed ("")       ! external to testmain
  acknowledge all failures
  if Log_Level_Reset = True then log level is all  ! reset datalogging
end if
Version_Inits_Needed = False
subend

!##############################################################################
sub Get_Version_Label
global Version_Label$, Version_Prompt$, True, False
global Version_Inits_Needed

Old_Version$ = bvi$
Version_Inits_Needed = True
loop
  Version_Label$ = ""
  print using """" & Version_Prompt$ & """,#"
  input "", Version_Label$
  if Version_Label$ = "" or Version_Label$ = "*" then
    board version is *, Err
  else
    board version is Version_Label$, Err
  end if
  exit if not Err
  print errmlong$
end loop
if bvi$ = Old_Version$ then
  Version_Inits_Needed = False
end if
subend

!##############################################################################
def fn Replace_Character$(Char$)
  Val = num(Char$)
  if Val < 9 then
    String$ = "%00" & val$(Val)
  else
    if Val < 99 then
      String$ = "%0" & val$(Val)
    else
      String$ = "%" & val$(Val)
    end if
  end if
  return(String$)
fnend

def fn Replace_All_Chars$(String$, Char$)
To_Return$ = ""

String_Loop:

String_Loc = pos(String$, Char$)
if String_Loc = 0 then
  To_Return_New$ = To_Return$ & String$
else
  To_Return_New$ = To_Return$ & String$[1;String_Loc - 1] & fn Replace_Character$(Char$)
  String$ = String$[String_Loc + 1]
end if
To_Return$ = To_Return_New$
if String_Loc <> 0 then goto String_Loop
return(To_Return$)
fnend

def fn Remove_Special_Characters$(String$)
! used only with AwareTest.  Replaces all characters that cannot be
! used in an NT filename with their ASCII equivalent.

  To_Replace$ = fn Replace_All_Chars$(String$, "%")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "|")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "\")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "/")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "<")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, ">")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "*")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, "?")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, ":")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, " ")
  To_Replace$ = fn Replace_All_Chars$(To_Replace$, """")
  return(To_Replace$)
fnend

!##############################################################################
sub Initialize_Constants
global PreshortsMsg$, ShortsMsg$, PowerMsg$, DigitalMsg$, AnalogMsg$
global DigitalFuncMsg$, AnalogPoweredMsg$
global Break_Detected, Mode$, Board_Not_Tested$
global True, False, InvOn$, InvOff$, First_Run$, Board_Rev_Prompt$
global Pass_Msg$, Fail_Msg$, Pass_File$, Fail_File$, Stop_Msg$, Break_Msg$
global No_Init_Warning$, Rep_Test$, Place_Board_Prompt$, Learning_Off_Msg$
global BT_Passed$, BT_SR_Fail$, BT_CRC_Fail$, BT_Notest$, BT_Indeter$
global BT_Interm$, BT_Incons$, BT_Open$, BT_NResults$
global Confirming$, Confirm_Failed$
global Failed_In_Learn, Failed_Pin_Test, Failed_In_Preshorts, Failed_In_Shorts
global Failed_In_Analog, Failed_In_Power_Supplies, Failed_In_Digital
global Failed_In_Functional, Failed_In_BScan, Passed, Failed
global Directory_Exists, Log_Path$, System$, Queue_Error_Msg$, Board$
global Break_Code, Error_Code
global But$, Serial_Prompt$, Bad_Serial_Image$, Oper_Id_Prompt$
global Known_Good_Prompt$, Serial_Nr$
global Retry_PinTest$, Cycle_Vacuum$, Recycle_Vacuum$
global Pin_Msg$, Max_Times_To_Fix_Contact
global BScanIntconMsg$, BScanIncktMsg$, Chek_Point_Msg$
global TestJetMsg$, Failed_In_TestJet
global PolarityMsg$, Failed_In_Polarity_Check
global BScanPShortsMsg$, No_Version_Init_Warning$
global Version_Label$, Version_Prompt$
global ConnectCheckMsg$, Failed_In_ConnectCheck
global Failed_In_Flash, FlashProgMsg$
global Serial_Number_Directory$, Not_AXI_Tested$, Serial_Suffix$
global AnalogClusterMsg$, Failed_In_Analog_Cluster
global BScanSiNailsMsg$, Failed_In_BScan_SiNails
global SW_ScanPathVerifyMsg$, Failed_In_SW_Testing
global SW_DrVerifyMsg$, SW_IrVerifyMsg$
global SW_InterconnectMsg$, SW_MemInterconnectMsg$
global SW_ClusterMsg$, SW_MemBistMsg$
global SW_ProgrammingMsg$, Failed_In_SW_Programming
global SW_FlashMsg$, Failed_In_SW_Flash
global Bad_Board_Name$

Break_Detected           = False
InvOn$                   = chr$(27)&"&dB"&chr$(7)  ! chr$(7) rings bell
InvOff$                  = chr$(27)&"&d@"
Passed                   = 0
Failed                   = 1
Failed_Pin_Test          = 2
Failed_In_Learn          = 3
Failed_In_Shorts         = 4
Failed_In_Analog         = 6
Failed_In_Power_Supplies = 7
Failed_In_Digital        = 8
Failed_In_Functional     = 9
Failed_In_Preshorts      = 10
! Status codes 11, 12 reserved for use by EFS
Failed_In_BScan          = 8      ! Equate to Failed_In_Digital
Failed_In_TestJet        = 14
Failed_In_Polarity_Check = 15
Failed_In_ConnectCheck   = 16
Failed_In_Analog_Cluster = 17
Failed_In_Flash          = 18
Failed_In_BScan_SiNails  = 19
Failed_In_SW_Testing     = 8      ! Equate to Failed_In_Digital
Failed_In_SW_Programming = 20
Failed_In_SW_Flash       = 21
Error_Code               = 80
Break_Code               = 82
Directory_Exists         = 100312
Log_Path$                = btgetenv$("AGILENT3070_ROOT")&"/qm/logdata/testerq/"&Board$&"/"
enter "uname -n |";System$              ! gets hostname (without domain)
Max_Times_To_Fix_Contact = 4            ! MUST BE >= 1
Pin_Msg$                 = "FIXTURE CONTACT PROBLEM"
O$                       = InvOn$&"Press YES"&InvOff$
O$                       = O$&" to retry Pins Test, "&InvOn$&"NO"&InvOff$
Retry_PinTest$           = O$&" to test a new board."
O$                       = InvOn$&"Press YES"&InvOff$&" to cycle vacuum, "
Cycle_Vacuum$            = O$&InvOn$&"NO"&InvOff$&" Otherwise."
O$                       = InvOn$&"Press YES"&InvOff$
Recycle_Vacuum$          = O$&" to turn vacuum on and continue testing."
Queue_Error_Msg$         = "Cannot create directory to queue up log data.  Error is:"
But$                     = "Board Under Test: "
Serial_Prompt$           = InvOn$&"Enter"&InvOff$&" Board Identifier: "
O$                       = "/,""Identifier has wrong length ("",dd,""), must be "
Bad_Serial_Image$        = O$&""",dd,""."",/"
Oper_Id_Prompt$          = InvOn$&"Enter"&InvOff$&" Operator Identifier: "
Known_Good_Prompt$       = InvOn$&"Enter"&InvOff$&" Verification Board Identifier: "
Rep_Test$                = "Repeating test of this board!"
First_Run$               = "Please stand by -- doing first-run initializations"
No_Init_Warning$         = "** WARNING: FIRST RUN INITIALIZATIONS NOT COMPLETED --"
No_Init_Warning$         = No_Init_Warning$ & " CLEARING NRUN **"
O$                       = "** WARNING: VERSION CHANGE INITIALIZATIONS NOT"
No_Version_Init_Warning$ = O$ & " COMPLETED -- CLEARING NRUN **"
Pass_File$               = btgetenv$("AGILENT3070_ROOT")&"/util/pass"
Fail_File$               = btgetenv$("AGILENT3070_ROOT")&"/util/fail"
Board_Not_Tested$        = "Board not tested."
Pass_Msg$                = "P A S S E D"
Fail_Msg$                = "F A I L E D"
Stop_Msg$                = "P R O G R A M   S T O P P E D"
Break_Msg$               = "Break/Stop detected."
Place_Board_Prompt$      = "Place board on fixture and "&InvOn$&"press START"
Board_Rev_Prompt$        = InvOn$&"Enter"&InvOff$&" Board Revision: "
Confirming$              = "Confirming diagnosis..."
Confirm_Failed$          = "Confirm failed; restarting at node """
Learning_Off_Msg$        = "Learning turned off"
if learning then
  Mode$                  = "Learning "
else
  Mode$                  = "Testing "
end if
PreshortsMsg$            = "Preshorts"
ShortsMsg$               = "Shorts"
PowerMsg$                = "Setting Up Power Supplies"
DigitalMsg$              = "Digital Incircuit"
AnalogMsg$               = "Analog Unpowered"
AnalogClusterMsg$        = "Analog Cluster"
TestJetMsg$              = "TestJet"
PolarityMsg$             = "Polarity Check"
ConnectCheckMsg$         = "Connect Check"
DigitalFuncMsg$          = "Digital Functional"
AnalogPoweredMsg$        = "Analog Powered and Mixed"
BScanIntconMsg$          = "Boundary Scan Interconnect"
BScanIncktMsg$           = "Boundary Scan Incircuit"
BScanPShortsMsg$         = "Boundary Scan Powered Shorts"
BScanSiNailsMsg$         = "Boundary Scan Silicon Nails"
FlashProgMsg$            = "Programming Flash"
SW_ScanPathVerifyMsg$    = "Scan Path Verify with ScanWorks"
SW_DrVerifyMsg$          = "DR Verify with ScanWorks"
SW_IrVerifyMsg$          = "IR Verify with ScanWorks"
SW_InterconnectMsg$      = "Interconnect with ScanWorks"
SW_MemInterconnectMsg$   = "Memory Interconnect with ScanWorks"
SW_ClusterMsg$           = "Cluster with ScanWorks"
SW_MemBistMsg$           = "Memory BIST with ScanWorks"
SW_ProgrammingMsg$       = "Programming Devices with ScanWorks"
SW_FlashMsg$             = "Programming Flash with ScanWorks"
Serial_Nr$               = "Serial #: "
BT_Passed$               = "passed"
BT_SR_Fail$              = "failed vector "
BT_CRC_Fail$             = "failed CRC is """
BT_Notest$               = "was not tested"
BT_Indeter$              = "was indeterminate"
BT_Interm$               = "was intermittent"
BT_Incons$               = "was inconsistent"
BT_Open$                 = "has an open trace"
BT_NResults$             = "noderesults= "
Chek_Point_Msg$          = "Testing Pin Contact"
Version_Label$           = ""
Version_Prompt$          = InvOn$&"Enter"&InvOff$&" Version Label: "
Serial_Number_Directory$ = "AXI_passed_boards/"
Serial_Suffix$           = ".SNF"
Not_AXI_Tested$          = "Board did not pass AXI; cannot test on Agilent 3070."
SNF_Error_Msg$           = "Error accessing serial number file. Error is: "
Bad_Board_Name$          = "Board name contains space, cannot proceed:"
subend

!##############################################################################
sub Set_Custom_Options
!  All variables likely to need to be changed are initialized here.
!  The Usage flag(s) can be set True or False to selectively enable or
!  disable the code needed for each indicated subsystem or feature.
global Using_ART, QSTATS_Mode, Testrev$
global Analog_Sample_Rate
global Serializing, Serial_Length
global Chek_Point_Mode
global Report_Printer$, True, False, Using_Buffered_Reporting
global Off, Pretest, Failures, No_Histo, Histo
global Per_Run, Per_Board, Version_Prompting
global Programming, AXI_Tested_Override

!   Usage flag(s)

QSTATS_Mode               = Off         ! Choose {Off, No_Histo, Histo}
Chek_Point_Mode           = Failures    ! Choose {Off, Pretest, Failures}
Using_ART                 = False       ! Agilent Repair Tool.
Serializing               = False       ! Will get set True if Using_ART.
Using_Buffered_Reporting  = True        ! Report failures during board handling
Programming               = False       ! Execute Flash and device programming.

!   Other parameters

Report_Printer$           = btgetenv$("RPR"&th$) ! Final report destination
!Report_Printer$           = "/dev/tty"  ! Send reports to the screen
Testrev$                  = "RevA"      ! Update this faithfully
Analog_Sample_Rate        = .10         ! Meaningful if QSTATS_Mode = Histo
Serial_Length             = 28          ! Board Id Length (0 = no checking)
Version_Prompting         = Per_Board   ! Choose {Per_Board, Per_Run}
                                        ! Used only on multiple version board
AXI_Tested_Override       = False       ! Choose {True, False}
                                        ! Used only on AwareTest board
subend

!##############################################################################
sub Cleanup_Flash
global Logging, Report_level$

if Report_level$ = "all" then report level is all
if Report_level$ = "none" then report level is none
if Report_level$ = "log" then report level is log
if Report_level$ = "report" then report level is report
if Logging then
  call Set_Log_Level
end if
subend

!       Data Logging Subroutines

!##############################################################################
sub Set_Log_Level
global Sampling

if learning then
  log level is all
else
  if Sampling then
    log level is analog without nhls, pins
  else
    log level is indictments without nhls
  end if
end if
subend

!                          END OF TESTMAIN
!##############################################################################

sub Initialize_Board_Constants
global Board$,Board_Rev$
global Using_Multiple_Versions, True, False
global Using_AwareTest

   Board$ = "07212-1"
   Board_Rev$ = ""

! 'vacuum well' statement goes here (if required)
   vacuum well a is 2,3
   Using_Multiple_Versions = False
   Using_AwareTest = False
subend

sub Characterize
global Status, Failed_In_Learn

   Status = Failed_In_Learn
   learn capacitance on
   test "analog/c4"
   test "analog/c5"
   test "analog/c11"
   test "analog/c12"
!   test "analog/c17"  ! test commented in testorder
!   test "analog/c27"  ! test commented in testorder
!   test "analog/c33"  ! test commented in testorder
!   test "analog/c40"  ! test commented in testorder
!   test "analog/c61"  ! test commented in testorder
   test "analog/c89"
   test "analog/c100"
   test "analog/c101"
   test "analog/c109"
   test "analog/c118"
   test "analog/c127"
!   test "analog/c275"  ! test commented in testorder
!   test "analog/c276"  ! test commented in testorder
!   test "analog/c290"  ! test commented in testorder
!   test "analog/c330"  ! test commented in testorder
!   test "analog/c339"  ! test commented in testorder
!   test "analog/c341"  ! test commented in testorder
!   test "analog/c357"  ! test commented in testorder
   test "analog/c358"
!   test "analog/c377"  ! test commented in testorder
!   test "analog/c378"  ! test commented in testorder
!   test "analog/c406"  ! test commented in testorder
!   test "analog/c421"  ! test commented in testorder
   test "analog/c494"
   test "analog/c498"
   test "analog/c503"
   test "analog/c521"
   test "analog/c526"
!   test "analog/c539"  ! test commented in testorder
   test "analog/c542"
!   test "analog/c550"  ! test commented in testorder
   test "analog/c553"
   test "analog/c554"
!   test "analog/c564"  ! test commented in testorder
   test "analog/c570"
   test "analog/c572"
   test "analog/c617"
   test "analog/c623"
   test "analog/c631"
   test "analog/c633"
!   test "analog/c702"  ! test commented in testorder
!   test "analog/c730"  ! test commented in testorder
!   test "analog/c778"  ! test commented in testorder
!   test "analog/c782"  ! test commented in testorder
   test "analog/c788"
   test "analog/c789"
   test "analog/c790"
   test "analog/c812"
   test "analog/c827"
   test "analog/c842"
!   test "analog/c864"  ! test commented in testorder
!   test "analog/c867"  ! test commented in testorder
   test "analog/c869"
   test "analog/c870"
   test "analog/c873"
   test "analog/c874"
!   test "analog/c875"  ! test commented in testorder
!   test "analog/c884"  ! test commented in testorder
   test "analog/ec36"
!   test "analog/ec37"  ! test commented in testorder
   test "analog/ec83"
   test "analog/ec84"
   test "analog/ec85"
!   test "analog/ec86"  ! test commented in testorder
   test "analog/ec87"
   test "analog/ec88"
   test "analog/ec90"
   test "analog/ec91"
   test "analog/tc9"
   test "analog/c20"
   test "analog/c48"
!   test "analog/ec92"  ! test commented in testorder
   test "analog/c413"
!   test "analog/c416"  ! test commented in testorder
!   test "analog/c419"  ! test commented in testorder
   test "analog/c822"
   test "analog/c837"
   test "analog/c839"
   test "analog/c840"
   test "analog/ec49"
   test "analog/ec51"
   test "analog/ec55"
   test "analog/ec75"
   test "analog/ec76"
   test "analog/c511"
   test "analog/c522"
   test "analog/c533"
   test "analog/c766"
   test "analog/c855"
   test "analog/c859"
   test "analog/c865"
   test "analog/ec24"
   test "analog/ec25"
   test "analog/ec26"
   test "analog/ec27"
   test "analog/q7%cgs"
   test "analog/q10%cgs"
   test "analog/q11%cgs"
   test "analog/q15%cgs"
   test "analog/q16%cgs"
   test "analog/q18%cgs"
   test "analog/q20%cgs"
   test "analog/q26%cgs"
   test "analog/q32%cgs"
   test "analog/q34%cgs"
   test "analog/q35%cgs"
   test "analog/q46%cgs"
   test "analog/q47%cgs"
   test "analog/q48%cgs"
   test "analog/u75%cgs"
   test "analog/c297"
   test "analog/c298"
   test "analog/c299"
   test "analog/c300"
   test "analog/c301"
   test "analog/c302"
   test "analog/c303"
   test "analog/c304"
   test "analog/c305"
   test "analog/c306"
   test "analog/c307"
   test "analog/c308"
   test "analog/c309"
   test "analog/c310"
   test "analog/c314"
   test "analog/c315"
   test "analog/c316"
   test "analog/c317"
   test "analog/c318"
   test "analog/c319"
   test "analog/c320"
   test "analog/c321"
   test "analog/c322"
   test "analog/c323"
   test "analog/c324"
!   test "analog/c523"  ! test commented in testorder
   test "analog/ec68"
   test "analog/ec69"
   test "analog/ec70"
   test "analog/ec71"
   test "analog/ec72"
   test "analog/ec73"
   test "analog/c350"
   test "analog/c351"
   test "analog/c354"
   test "analog/c355"
!   test "analog/c387"  ! test commented in testorder
   test "analog/c548"
   test "analog/c629"
!   test "analog/c854"  ! test commented in testorder
!   test "analog/c862"  ! test commented in testorder
   test "analog/c876"
!   test "analog/ec80"  ! test commented in testorder
!   test "analog/ec81"  ! test commented in testorder
   test "analog/ec82"
   test "analog/c895"
   test "analog/c896"
   test "analog/ec77"
   test "analog/ec78"
   test "analog/c897"
   learn capacitance off
subend

sub Pre_Shorts (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "analog/f1"
   test "analog/f3"
   test "analog/g32"
   test "analog/g33"
   test "analog/g34"
   test "analog/g78"
   test "analog/g79"
   test "analog/f2"
   test "analog/g1"
   test "analog/g2"
   test "analog/g3"
   test "analog/g5"
   test "analog/g8"
   test "analog/g9"
   test "analog/g20"
   test "analog/g21"
   test "analog/g22"
   test "analog/g23"
   test "analog/g24"
   test "analog/g25"
   test "analog/g31"
   test "analog/g35"
   test "analog/g39"
   test "analog/g44"
   test "analog/g45"
   test "analog/g46"
   test "analog/g47"
   test "analog/g48"
   test "analog/g49"
   test "analog/g58"
   test "analog/g67"
   test "analog/g72"
   test "analog/g80"
   test "analog/g86"
   test "analog/g90"
   test "analog/g100"
   test "analog/g101"
   test "analog/l1"
   test "analog/l2"
   test "analog/l3"
   test "analog/l4"
   test "analog/l5%jp1"
   test "analog/l5%jp2"
   test "analog/l6"
   test "analog/l7"
   test "analog/l8"
   test "analog/l9"
   test "analog/l10"
   test "analog/l11"
   test "analog/l12"
   test "analog/l13%jp1"
   test "analog/l13%jp2"
   test "analog/l14"
   test "analog/l15"
   test "analog/l16"
   test "analog/l17"
   test "analog/l18"
   test "analog/l19"
   test "analog/l20"
   test "analog/l21"
   test "analog/l22"
   test "analog/l23"
   test "analog/l24"
   test "analog/l25"
   test "analog/l26"
   test "analog/l27"
   test "analog/l31%jp2"
   test "analog/l32%jp1"
   test "analog/l32%jp2"
   test "analog/l33"
   test "analog/l34"
   test "analog/l35%jp1"
   test "analog/l35%jp2"
   test "analog/l36"
   test "analog/l37"
   test "analog/l38"
   test "analog/l39"
   test "analog/l40"
   test "analog/l41"
   test "analog/l42"
   test "analog/l43"
   test "analog/r2"
   test "analog/r3"
   test "analog/r10"
   test "analog/r14"
   test "analog/r16"
   test "analog/r19"
   test "analog/r27"
   test "analog/r29"
   test "analog/r30"
   test "analog/r32"
   test "analog/r33"
   test "analog/r35"
   test "analog/r40"
   test "analog/r43"
   test "analog/r52"
   test "analog/r57"
   test "analog/r58"
   test "analog/r59"
   test "analog/r69"
   test "analog/r70"
   test "analog/r111"
   test "analog/r112"
   test "analog/r116"
   test "analog/r122"
   test "analog/r123"
   test "analog/r129"
   test "analog/r132"
   test "analog/r133"
   test "analog/r147"
   test "analog/r152"
   test "analog/r153"
   test "analog/r161"
   test "analog/r194"
   test "analog/r201"
   test "analog/r229"
   test "analog/r230"
   test "analog/r231"
   test "analog/r232"
   test "analog/r234"
   test "analog/r239"
   test "analog/r254"
   test "analog/r256"
   test "analog/r258"
   test "analog/r259"
   test "analog/r292"
   test "analog/r319"
   test "analog/r322"
   test "analog/r338"
   test "analog/r383"
   test "analog/r392"
   test "analog/r393"
   test "analog/r426"
   test "analog/r433"
   test "analog/r437"
   test "analog/r445"
   test "analog/r450"
   test "analog/r465"
   test "analog/r480"
   test "analog/r481"
   test "analog/r482"
   test "analog/r485"
   test "analog/r490"
   test "analog/r500"
   test "analog/r513"
   test "analog/r536"
   test "analog/r537"
   test "analog/r538"
   test "analog/r539"
   test "analog/r540"
   test "analog/r541"
   test "analog/rn25%jp2"
   test "analog/rn26%jp2"
   test "analog/rn32%jp2"
   test "analog/rn33%jp1"
   test "analog/rn34%jp1"
   test "analog/xf1%jp1-3"
   test "analog/xf1%jp2-3"
   test "analog/xf1%jp6-7"
   test "analog/xf1%jp6-8"
   test "analog/xf1%jp9-11"
   test "analog/xf1%jp10-11"
   test "analog/xf1%jp14-15"
   test "analog/xf1%jp14-16"
subend

sub Shorts (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "shorts"
subend

sub Analog_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "analog/c1"
!   test "analog/c2"  ! test commented in testorder
   test "analog/c32"
   test "analog/c82"
   test "analog/c112"
   test "analog/c144"
   test "analog/tc23"
   test "analog/tc6"
   test "analog/tc8"
   test "analog/c524"
!   test "analog/c525"  ! test commented in testorder
   test "analog/c527"
!   test "analog/c532"  ! test commented in testorder
   test "analog/c534"
   test "analog/c535"
   test "analog/c540"
   test "analog/c543"
   test "analog/c546"
!   test "analog/c556"  ! test commented in testorder
   test "analog/c565"
   test "analog/c549"
   test "analog/c621"
   test "analog/c342"
   test "analog/c668"
   test "analog/c680"
!   test "analog/c699"  ! test commented in testorder
   test "analog/c721"
!   test "analog/c737"  ! test commented in testorder
!   test "analog/c752"  ! test commented in testorder
   test "analog/c779"
   test "analog/c479"
   test "analog/c886"
   test "analog/c899"
   test "analog/c7"
   test "analog/tc14"
   test "analog/c738"
   test "analog/c740"
   test "analog/c755"
   test "analog/c4"
   test "analog/c5"
   test "analog/c11"
   test "analog/c12"
!   test "analog/c17"  ! test commented in testorder
!   test "analog/c27"  ! test commented in testorder
!   test "analog/c33"  ! test commented in testorder
!   test "analog/c40"  ! test commented in testorder
   test "analog/tc1"
!   test "analog/c61"  ! test commented in testorder
   test "analog/c89"
   test "analog/c100"
   test "analog/c101"
   test "analog/c109"
   test "analog/c118"
   test "analog/c21"
   test "analog/c127"
   test "analog/c481"
!   test "analog/c275"  ! test commented in testorder
!   test "analog/c276"  ! test commented in testorder
!   test "analog/c290"  ! test commented in testorder
!   test "analog/c330"  ! test commented in testorder
   test "analog/tc2"
!   test "analog/c339"  ! test commented in testorder
!   test "analog/c341"  ! test commented in testorder
!   test "analog/c357"  ! test commented in testorder
   test "analog/c358"
!   test "analog/u64%cgs"  ! test commented in testorder
!   test "analog/c377"  ! test commented in testorder
!   test "analog/c378"  ! test commented in testorder
   test "analog/tc25"
!   test "analog/c406"  ! test commented in testorder
!   test "analog/c421"  ! test commented in testorder
   test "analog/c430"
   test "analog/tc24"
   test "analog/c494"
   test "analog/c498"
   test "analog/c503"
   test "analog/c521"
   test "analog/c526"
!   test "analog/c539"  ! test commented in testorder
   test "analog/c542"
!   test "analog/c550"  ! test commented in testorder
   test "analog/c553"
   test "analog/c554"
!   test "analog/c564"  ! test commented in testorder
   test "analog/c570"
   test "analog/c572"
   test "analog/c594"
   test "analog/c617"
   test "analog/c623"
   test "analog/c631"
   test "analog/c633"
!   test "analog/c702"  ! test commented in testorder
!   test "analog/c730"  ! test commented in testorder
   test "analog/c348"
!   test "analog/c778"  ! test commented in testorder
!   test "analog/c782"  ! test commented in testorder
   test "analog/c788"
   test "analog/c789"
   test "analog/c790"
   test "analog/c812"
   test "analog/c827"
   test "analog/c842"
!   test "analog/c864"  ! test commented in testorder
!   test "analog/c867"  ! test commented in testorder
   test "analog/c869"
   test "analog/c870"
   test "analog/c873"
   test "analog/c874"
!   test "analog/c875"  ! test commented in testorder
!   test "analog/c884"  ! test commented in testorder
   test "analog/tc20"
   test "analog/c861"
   test "analog/ec36"
!   test "analog/ec37"  ! test commented in testorder
   test "analog/ec83"
   test "analog/ec84"
   test "analog/ec85"
!   test "analog/ec86"  ! test commented in testorder
   test "analog/ec87"
   test "analog/ec88"
   test "analog/ec90"
   test "analog/ec91"
   test "analog/tc9"
   test "analog/c14"
   test "analog/c293"
   test "analog/c68"
   test "analog/c136"
   test "analog/c142"
   test "analog/tc17"
   test "analog/c159"
   test "analog/c164"
   test "analog/c168"
   test "analog/c190"
   test "analog/c200"
   test "analog/c250"
   test "analog/c269"
   test "analog/c273"
   test "analog/c288"
   test "analog/c291"
   test "analog/c296"
   test "analog/c325"
   test "analog/c364"
   test "analog/c373"
   test "analog/c372"
   test "analog/c398"
   test "analog/c403"
   test "analog/c407"
   test "analog/c405"
   test "analog/c411"
   test "analog/c420"
   test "analog/c422"
   test "analog/c423"
   test "analog/c434"
   test "analog/c446"
   test "analog/c459"
   test "analog/c497"
   test "analog/c512"
   test "analog/c517"
   test "analog/c518"
   test "analog/c567"
   test "analog/c589"
   test "analog/c592"
!   test "analog/c634"  ! test commented in testorder
   test "analog/c643"
   test "analog/c649"
   test "analog/c651"
   test "analog/c652"
   test "analog/c653"
   test "analog/c654"
   test "analog/c655"
   test "analog/c658"
   test "analog/c659"
   test "analog/c661"
   test "analog/c663"
   test "analog/c664"
   test "analog/c665"
   test "analog/c666"
   test "analog/c669"
   test "analog/c670"
   test "analog/c674"
   test "analog/c676"
   test "analog/c684"
   test "analog/c685"
   test "analog/c686"
   test "analog/c687"
   test "analog/c691"
   test "analog/c696"
   test "analog/c697"
   test "analog/c698"
   test "analog/c706"
   test "analog/c709"
   test "analog/c715"
   test "analog/c717"
   test "analog/c719"
   test "analog/c749"
   test "analog/c783"
   test "analog/c360"
   test "analog/c801"
   test "analog/c813"
   test "analog/c829"
   test "analog/c838"
   test "analog/c843"
   test "analog/c868"
   test "analog/c883"
   test "analog/c907"
   test "analog/c908"
   test "analog/c472"
   test "analog/c473"
   test "analog/c482"
   test "analog/c492"
   test "analog/c13"
   test "analog/c15"
   test "analog/c18"
   test "analog/c129"
   test "analog/c194"
   test "analog/c552"
   test "analog/c563"
   test "analog/c279"
   test "analog/c292"
   test "analog/c327"
   test "analog/c363"
   test "analog/c496"
   test "analog/c504"
   test "analog/c509"
   test "analog/c536"
   test "analog/c544"
   test "analog/c557"
   test "analog/c560"
   test "analog/c575"
   test "analog/c582"
   test "analog/c781"
   test "analog/c849"
   test "analog/c880"
   test "analog/c881"
   test "analog/c20"
   test "analog/c48"
!   test "analog/ec92"  ! test commented in testorder
   test "analog/c413"
!   test "analog/c416"  ! test commented in testorder
!   test "analog/c419"  ! test commented in testorder
   test "analog/c822"
   test "analog/c837"
   test "analog/c839"
   test "analog/c840"
   test "analog/ec49"
   test "analog/ec51"
   test "analog/ec55"
   test "analog/ec75"
   test "analog/ec76"
   test "analog/c511"
   test "analog/c522"
   test "analog/c533"
   test "analog/c766"
   test "analog/c855"
   test "analog/c859"
   test "analog/c865"
   test "analog/ec24"
   test "analog/ec25"
   test "analog/ec26"
   test "analog/ec27"
   test "analog/q5%cgs"
   test "analog/q7%cgs"
   test "analog/q9%cgs"
   test "analog/q10%cgs"
   test "analog/q11%cgs"
   test "analog/q12%cgs"
   test "analog/q15%cgs"
   test "analog/q16%cgs"
   test "analog/q18%cgs"
   test "analog/q20%cgs"
   test "analog/q26%cgs"
   test "analog/q32%cgs"
   test "analog/q34%cgs"
   test "analog/q35%cgs"
   test "analog/q46%cgs"
   test "analog/q47%cgs"
   test "analog/q48%cgs"
   test "analog/u75%cgs"
   test "analog/c488"
   test "analog/c505"
   test "analog/c280"
   test "analog/c625"
   test "analog/c626"
   test "analog/c642"
   test "analog/c507"
   test "analog/c297"
   test "analog/c298"
   test "analog/c299"
   test "analog/c300"
   test "analog/c301"
   test "analog/c302"
   test "analog/c303"
   test "analog/c304"
   test "analog/c305"
   test "analog/c306"
   test "analog/c307"
   test "analog/c308"
   test "analog/c309"
   test "analog/c310"
   test "analog/c314"
   test "analog/c315"
   test "analog/c316"
   test "analog/c317"
   test "analog/c318"
   test "analog/c319"
   test "analog/c320"
   test "analog/c321"
   test "analog/c322"
   test "analog/c323"
   test "analog/c324"
!   test "analog/c523"  ! test commented in testorder
   test "analog/ec68"
   test "analog/ec69"
   test "analog/ec70"
   test "analog/ec71"
   test "analog/ec72"
   test "analog/ec73"
   test "analog/c350"
   test "analog/c351"
   test "analog/c354"
   test "analog/c355"
!   test "analog/c387"  ! test commented in testorder
   test "analog/c476"
   test "analog/c477"
   test "analog/c877"
   test "analog/c878"
   test "analog/c548"
   test "analog/c629"
   test "analog/c791"
   test "analog/c792"
   test "analog/c823"
   test "analog/c825"
!   test "analog/c854"  ! test commented in testorder
!   test "analog/c862"  ! test commented in testorder
   test "analog/c876"
!   test "analog/ec80"  ! test commented in testorder
!   test "analog/ec81"  ! test commented in testorder
   test "analog/ec82"
   test "analog/c895"
   test "analog/c896"
   test "analog/ec77"
   test "analog/ec78"
   test "analog/c897"
   test "analog/tc10"
   test "analog/u1%cgs"
   test "analog/u2%cgs"
   test "analog/u4%cgs"
   test "analog/u5%cgs"
   test "analog/u13%cgs"
   test "analog/u15%cgs"
!   test "analog/u23%cgs"  ! test commented in testorder
!   test "analog/u37%cgs"  ! test commented in testorder
   test "analog/u38%cgs"
   test "analog/u39%cgs"
   test "analog/u42%cgs"
   test "analog/u44%cgs"
   test "analog/u50%cgs"
   test "analog/u56%cgs"
   test "analog/u58%cgs"
!   test "analog/u63%cgs"  ! test commented in testorder
   test "analog/u65%cgs"
   test "analog/u66%cgs"
   test "analog/u67%cgs"
   test "analog/u68%cgs"
   test "analog/u76%cgs"
   test "analog/d1%cr1"
   test "analog/d1%cr2"
   test "analog/d2%cr1"
   test "analog/d2%cr2"
   test "analog/d4%cr1"
   test "analog/d4%cr2"
   test "analog/d5%cr1"
   test "analog/d5%cr2"
   test "analog/d6%cr1"
   test "analog/d6%cr2"
   test "analog/d7%cr1"
   test "analog/d7%cr2"
   test "analog/d8%cr1"
   test "analog/d8%cr2"
   test "analog/d9%cr1"
   test "analog/d9%cr2"
   test "analog/d21%cr1"
   test "analog/d21%cr2"
   test "analog/d22%cr1"
   test "analog/d22%cr2"
   test "analog/d25%cr1"
   test "analog/d25%cr2"
   test "analog/d3"
   test "analog/d11"
   test "analog/d13"
   test "analog/d14"
   test "analog/d23"
   test "analog/d24"
   test "analog/q5%cr"
   test "analog/q6%cr"
   test "analog/q7%cr"
   test "analog/q8%cr"
   test "analog/q9%cr"
   test "analog/q10%cr"
   test "analog/q11%cr"
   test "analog/q12%cr"
   test "analog/q15%cr"
   test "analog/q16%cr"
   test "analog/q18%cr"
   test "analog/q20%cr"
   test "analog/q26%cr"
   test "analog/q32%cr"
   test "analog/q34%cr"
   test "analog/q35%cr"
   test "analog/q38%cr"
   test "analog/q39%cr"
   test "analog/q40%cr"
   test "analog/q42%cr"
   test "analog/q44%cr"
   test "analog/q46%cr"
   test "analog/q47%cr"
   test "analog/q48%cr"
   test "analog/q49%cr1"
   test "analog/q49%cr2"
   test "analog/q50%cr1"
   test "analog/q50%cr2"
   test "analog/u1%cr1-8"
   test "analog/u2%cr1-8"
   test "analog/u12%cr1"
   test "analog/u12%cr2"
   test "analog/u13%cr1-8"
   test "analog/u15%cr1-8"
   test "analog/u16%cr1"
   test "analog/u16%cr2"
   test "analog/u23%cr1-8"
   test "analog/u32%cr1"
   test "analog/u32%cr2"
   test "analog/u33%cr1"
   test "analog/u33%cr2"
   test "analog/u37%cr1-8"
   test "analog/u38%cr1-8"
   test "analog/u39%cr1-8"
   test "analog/u42%cr1-8"
   test "analog/u44%cr1-8"
   test "analog/u46%cr1-8"
   test "analog/u50%cr1-8"
   test "analog/u56%cr1-8"
   test "analog/u58%cr1-8"
   test "analog/u63%cr1-8"
   test "analog/u64%cr1-8"
   test "analog/u65%cr1-8"
   test "analog/u66%cr1-8"
   test "analog/u67%cr1-8"
   test "analog/u68%cr1-8"
   test "analog/u74%cr1"
   test "analog/u74%cr2"
   test "analog/u75%cr1-4"
   test "analog/u76%cr1-8"
   test "analog/d10%cr1"
   test "analog/d12%cr1"
   test "analog/d15%cr1"
   test "analog/d16%cr1"
   test "analog/d17%cr1"
   test "analog/d18%cr1"
   test "analog/d18%cr2"
   test "analog/d26%cr1"
   test "analog/d26%cr2"
   test "analog/d27%cr1"
   test "analog/d28%cr1"
   test "analog/d28%cr2"
   test "analog/d29%cr1"
   test "analog/d29%cr2"
   test "analog/d29%cr3"
   test "analog/d30%cr1"
   test "analog/d30%cr2"
   test "analog/d31%cr1"
   test "analog/d32%cr1"
   test "analog/d32%cr2"
   test "analog/led1%cr1"
   test "analog/u18%cr1"
   test "analog/u18%cr2"
   test "analog/led2%cr"
   test "analog/q1%r1"
   test "analog/q2%r1"
   test "analog/q3%r1"
   test "analog/q4%r1"
   test "analog/q22%r1"
   test "analog/q23%r1"
   test "analog/q24%r1"
   test "analog/q27%r1"
   test "analog/q28%r1"
   test "analog/q29%r1"
   test "analog/q30%r1"
   test "analog/q31%r1"
   test "analog/q36%r1"
   test "analog/q41%r1"
   test "analog/rn1%r1"
   test "analog/rn1%r2"
   test "analog/rn19%r1"
   test "analog/rn19%r2"
   test "analog/rn21%r1"
   test "analog/rn21%r2"
   test "analog/rn22%r1"
   test "analog/rn22%r2"
   test "analog/rn23%r1"
   test "analog/rn23%r2"
   test "analog/rn42%r1"
   test "analog/rn42%r2"
   test "analog/rn44%r1"
   test "analog/rn44%r2"
   test "analog/r1"
   test "analog/r4"
   test "analog/r13"
   test "analog/r18"
   test "analog/r199"
   test "analog/r214"
   test "analog/r346"
   test "analog/r514"
   test "analog/r5"
   test "analog/r6"
   test "analog/r47"
   test "analog/r48"
   test "analog/r103"
   test "analog/r216"
   test "analog/r233"
   test "analog/r241"
   test "analog/r320"
   test "analog/r362"
   test "analog/r363"
   test "analog/r394"
   test "analog/r401"
   test "analog/r427"
   test "analog/r439"
   test "analog/r7"
   test "analog/r468"
   test "analog/r8"
   test "analog/r31"
   test "analog/r9"
   test "analog/r11"
   test "analog/r82"
   test "analog/r131"
   test "analog/r149"
   test "analog/r238"
   test "analog/r242"
   test "analog/r251"
   test "analog/r309"
   test "analog/r318"
   test "analog/r325"
   test "analog/r329"
   test "analog/r332"
   test "analog/r353"
   test "analog/r366"
   test "analog/r417"
   test "analog/r428"
   test "analog/r12"
   test "analog/r26"
   test "analog/r224"
   test "analog/r225"
   test "analog/r453"
   test "analog/r15"
   test "analog/r278"
   test "analog/r17"
   test "analog/r20"
   test "analog/r118"
   test "analog/r21"
   test "analog/r53"
   test "analog/r60"
   test "analog/r64"
   test "analog/r67"
   test "analog/r68"
   test "analog/r71"
   test "analog/r72"
   test "analog/r73"
   test "analog/r75"
   test "analog/r77"
   test "analog/r78"
   test "analog/r79"
   test "analog/r81"
   test "analog/r83"
   test "analog/r87"
   test "analog/r88"
   test "analog/r95"
   test "analog/r107"
   test "analog/r117"
   test "analog/r120"
   test "analog/r128"
   test "analog/r134"
   test "analog/r136"
   test "analog/r141"
!   test "analog/r159"  ! test commented in testorder
   test "analog/r162"
!   test "analog/r163"  ! test commented in testorder
   test "analog/r172"
   test "analog/r174"
   test "analog/r182"
   test "analog/r183"
   test "analog/r188"
   test "analog/r189"
   test "analog/r193"
   test "analog/r195"
   test "analog/r197"
   test "analog/r198"
   test "analog/r202"
   test "analog/r206"
   test "analog/r209"
   test "analog/r210"
   test "analog/r223"
   test "analog/r228"
   test "analog/r257"
   test "analog/r265"
   test "analog/r282"
   test "analog/r283"
   test "analog/r289"
   test "analog/r294"
   test "analog/r295"
   test "analog/r296"
   test "analog/r297"
   test "analog/r298"
   test "analog/r299"
   test "analog/r300"
   test "analog/r301"
   test "analog/r334"
   test "analog/r341"
!   test "analog/r354"  ! test commented in testorder
   test "analog/r377"
   test "analog/r379"
   test "analog/r387"
   test "analog/r396"
!   test "analog/r397"  ! test commented in testorder
   test "analog/r399"
   test "analog/r400"
   test "analog/r403"
   test "analog/r406"
   test "analog/r407"
   test "analog/r409"
   test "analog/r410"
   test "analog/r144"
   test "analog/r421"
   test "analog/r424"
   test "analog/r430"
   test "analog/r435"
   test "analog/r438"
   test "analog/r446"
   test "analog/r447"
   test "analog/r451"
   test "analog/r452"
!   test "analog/r456"  ! test commented in testorder
   test "analog/r457"
   test "analog/r458"
!   test "analog/r459"  ! test commented in testorder
   test "analog/r460"
   test "analog/r462"
   test "analog/r475"
   test "analog/r479"
   test "analog/r483"
   test "analog/r484"
   test "analog/r488"
   test "analog/r489"
   test "analog/r492"
   test "analog/r493"
   test "analog/r494"
!   test "analog/r499"  ! test commented in testorder
   test "analog/r501"
   test "analog/r503"
   test "analog/r504"
   test "analog/r505"
   test "analog/r524"
   test "analog/r525"
   test "analog/r528"
   test "analog/r530"
!   test "analog/r531"  ! test commented in testorder
!   test "analog/r532"  ! test commented in testorder
   test "analog/r535"
   test "analog/r546"
   test "analog/r550"
   test "analog/r552"
   test "analog/r22"
   test "analog/r23"
   test "analog/r46"
   test "analog/r65"
   test "analog/r66"
   test "analog/r76"
   test "analog/r85"
   test "analog/r86"
   test "analog/r92"
   test "analog/r93"
   test "analog/r98"
   test "analog/r99"
   test "analog/r109"
   test "analog/r110"
   test "analog/r113"
   test "analog/r124"
   test "analog/r140"
   test "analog/r142"
   test "analog/r154"
   test "analog/r160"
   test "analog/r167"
   test "analog/r168"
   test "analog/r169"
   test "analog/r171"
   test "analog/r185"
   test "analog/r191"
   test "analog/r220"
   test "analog/r226"
   test "analog/r247"
   test "analog/r270"
   test "analog/r273"
   test "analog/r275"
   test "analog/r279"
   test "analog/r281"
   test "analog/r284"
   test "analog/r286"
   test "analog/r287"
   test "analog/r288"
   test "analog/r293"
   test "analog/r302"
   test "analog/r316"
   test "analog/r331"
   test "analog/r348"
   test "analog/r349"
   test "analog/r356"
   test "analog/r374"
   test "analog/r376"
   test "analog/r385"
   test "analog/r386"
   test "analog/r390"
   test "analog/r395"
   test "analog/r398"
   test "analog/r422"
   test "analog/r425"
   test "analog/r434"
   test "analog/r436"
   test "analog/r440"
   test "analog/r444"
   test "analog/r495"
   test "analog/r498"
   test "analog/r508"
   test "analog/r526"
   test "analog/r529"
   test "analog/r533"
   test "analog/r534"
   test "analog/r542"
   test "analog/rn24%r1-8"
   test "analog/rn24%r2-7"
   test "analog/rn24%r3-6"
   test "analog/rn24%r4-5"
   test "analog/rn43%r2-7"
   test "analog/rn43%r3-6"
   test "analog/rn43%r4-5"
   test "analog/rn47%r1-8"
   test "analog/rn47%r2-7"
   test "analog/rn47%r3-6"
   test "analog/rn47%r4-5"
   test "analog/rn48%r2-7"
   test "analog/rn48%r3-6"
   test "analog/rn48%r4-5"
   test "analog/rn49%r1-8"
   test "analog/rn49%r2-7"
   test "analog/rn49%r3-6"
   test "analog/rn49%r4-5"
   test "analog/rn50%r1-8"
   test "analog/rn50%r2-7"
   test "analog/rn50%r3-6"
   test "analog/rn50%r4-5"
   test "analog/rn51%r1-8"
   test "analog/rn51%r2-7"
   test "analog/rn51%r3-6"
   test "analog/rn51%r4-5"
   test "analog/rn53%r1-8"
   test "analog/rn53%r2-7"
   test "analog/rn53%r3-6"
   test "analog/rn53%r4-5"
   test "analog/rn55%r1-8"
   test "analog/rn55%r2-7"
   test "analog/rn55%r3-6"
   test "analog/rn55%r4-5"
   test "analog/rn62%r1-8"
   test "analog/rn62%r4-5"
   test "analog/r28"
   test "analog/r137"
   test "analog/r36"
   test "analog/r44"
   test "analog/r45"
   test "analog/r50"
   test "analog/r61"
   test "analog/r62"
   test "analog/r63"
   test "analog/r90"
   test "analog/r378"
   test "analog/r382"
   test "analog/r384"
   test "analog/r37"
   test "analog/r38"
   test "analog/r39"
   test "analog/r42"
   test "analog/r311"
   test "analog/r41"
   test "analog/r310"
   test "analog/r312"
   test "analog/r313"
   test "analog/r49"
   test "analog/r51"
   test "analog/r164"
   test "analog/r186"
   test "analog/r187"
   test "analog/r255"
   test "analog/r267"
   test "analog/r432"
   test "analog/r448"
   test "analog/r469"
   test "analog/r471"
   test "analog/r522"
   test "analog/r56"
   test "analog/r84"
   test "analog/r74"
   test "analog/r155"
   test "analog/r418"
   test "analog/r419"
   test "analog/r518"
   test "analog/r519"
   test "analog/r520"
   test "analog/r521"
   test "analog/rn5%r1-8"
   test "analog/rn5%r2-7"
   test "analog/rn5%r3-6"
   test "analog/rn5%r4-5"
   test "analog/rn6%r1-8"
   test "analog/rn6%r2-7"
   test "analog/rn6%r3-6"
   test "analog/rn6%r4-5"
   test "analog/rn7%r1-8"
   test "analog/rn7%r2-7"
   test "analog/rn7%r3-6"
   test "analog/rn7%r4-5"
   test "analog/rn11%r1-8"
   test "analog/rn11%r2-7"
   test "analog/rn11%r3-6"
   test "analog/rn11%r4-5"
   test "analog/rn12%r1-8"
   test "analog/rn12%r2-7"
   test "analog/rn12%r3-6"
   test "analog/rn12%r4-5"
   test "analog/rn13%r1-8"
   test "analog/rn13%r2-7"
   test "analog/rn13%r3-6"
   test "analog/rn13%r4-5"
   test "analog/rn14%r1-8"
   test "analog/rn14%r2-7"
   test "analog/rn14%r3-6"
   test "analog/rn14%r4-5"
   test "analog/rn15%r1-8"
   test "analog/rn15%r2-7"
   test "analog/rn15%r3-6"
   test "analog/rn15%r4-5"
   test "analog/rn16%r1-8"
   test "analog/rn16%r2-7"
   test "analog/rn16%r3-6"
   test "analog/rn16%r4-5"
   test "analog/rn17%r1-8"
   test "analog/rn17%r2-7"
   test "analog/rn17%r3-6"
   test "analog/rn18%r1-8"
   test "analog/rn18%r2-7"
   test "analog/rn18%r3-6"
   test "analog/rn39%r1-8"
   test "analog/rn39%r2-7"
   test "analog/rn39%r3-6"
   test "analog/rn39%r4-5"
   test "analog/rn40%r1-8"
   test "analog/rn40%r2-7"
   test "analog/rn40%r3-6"
   test "analog/rn40%r4-5"
   test "analog/rn41%r1-8"
   test "analog/rn41%r2-7"
   test "analog/rn41%r3-6"
   test "analog/rn41%r4-5"
   test "analog/r80"
   test "analog/r89"
   test "analog/r91"
   test "analog/r268"
   test "analog/r290"
   test "analog/r291"
   test "analog/r303"
   test "analog/r304"
   test "analog/r305"
   test "analog/r431"
   test "analog/r449"
   test "analog/r94"
   test "analog/r96"
   test "analog/r104"
   test "analog/r119"
   test "analog/r166"
   test "analog/r314"
   test "analog/r423"
   test "analog/r467"
   test "analog/r105"
   test "analog/r106"
   test "analog/r108"
   test "analog/r402"
   test "analog/r511"
   test "analog/r114"
   test "analog/r115"
   test "analog/r323"
   test "analog/r360"
   test "analog/r361"
   test "analog/r121"
   test "analog/r125"
   test "analog/r130"
   test "analog/r135"
   test "analog/r138"
   test "analog/r250"
   test "analog/r476"
   test "analog/r139"
   test "analog/r326"
   test "analog/r143"
   test "analog/r151"
   test "analog/r180"
   test "analog/r181"
   test "analog/r237"
   test "analog/r389"
   test "analog/r408"
   test "analog/r429"
   test "analog/r506"
   test "analog/r507"
   test "analog/r516"
   test "analog/r145"
   test "analog/r170"
   test "analog/r177"
   test "analog/r179"
   test "analog/r204"
   test "analog/r207"
   test "analog/r208"
   test "analog/r213"
   test "analog/r215"
   test "analog/r244"
   test "analog/r264"
   test "analog/r271"
   test "analog/r276"
   test "analog/r277"
   test "analog/r333"
   test "analog/r351"
   test "analog/r368"
   test "analog/r388"
   test "analog/r391"
   test "analog/r405"
   test "analog/r411"
   test "analog/r461"
   test "analog/r463"
   test "analog/r470"
   test "analog/r472"
   test "analog/r502"
   test "analog/r512"
   test "analog/r515"
   test "analog/r527"
   test "analog/r543"
   test "analog/r544"
   test "analog/r545"
   test "analog/r547"
   test "analog/r548"
   test "analog/r549"
   test "analog/r551"
   test "analog/r148"
   test "analog/r380"
   test "analog/r150"
   test "analog/r441"
   test "analog/r156"
   test "analog/r157"
   test "analog/r165"
   test "analog/r211"
   test "analog/r212"
   test "analog/r158"
   test "analog/r203"
   test "analog/r205"
   test "analog/r176"
   test "analog/r308"
   test "analog/r324"
   test "analog/r381"
   test "analog/r190"
   test "analog/r266"
   test "analog/r196"
   test "analog/r269"
   test "analog/r464"
   test "analog/r496"
   test "analog/r235"
   test "analog/r236"
   test "analog/r240"
   test "analog/r248"
   test "analog/r249"
   test "analog/r253"
   test "analog/r263"
   test "analog/r274"
   test "analog/r306"
   test "analog/r342"
   test "analog/r373"
   test "analog/r375"
   test "analog/r307"
   test "analog/r340"
   test "analog/r359"
   test "analog/r369"
   test "analog/r315"
   test "analog/r343"
   test "analog/r358"
   test "analog/r371"
   test "analog/r335"
   test "analog/r370"
   test "analog/r372"
   test "analog/r321"
   test "analog/r327"
   test "analog/r328"
   test "analog/r442"
   test "analog/r330"
   test "analog/r365"
   test "analog/r412"
   test "analog/r414"
   test "analog/r415"
   test "analog/r416"
   test "analog/r420"
   test "analog/r454"
   test "analog/r455"
   test "analog/r473"
   test "analog/r474"
   test "analog/r477"
   test "analog/r478"
   test "analog/r486"
   test "analog/r497"
   test "analog/r523"
   test "analog/r487"
   test "analog/r510"
   test "analog/rn4%r1"
   test "analog/rn4%r2"
   test "analog/rn9%r1"
   test "analog/rn9%r2"
   test "analog/rn38%r1"
   test "analog/rn38%r2"
   test "analog/rn45%r1"
   test "analog/rn45%r2"
   test "analog/rn46%r1"
   test "analog/rn46%r2"
   test "analog/rn54%r1"
   test "analog/rn54%r2"
   test "analog/rn8%r1-8"
   test "analog/rn8%r2-7"
   test "analog/rn8%r3-6"
   test "analog/rn8%r4-5"
   test "analog/rn10%r1"
   test "analog/rn10%r2"
   test "analog/rn37%r1"
   test "analog/rn37%r2"
   test "analog/rn63%r1"
   test "analog/rn63%r2"
   test "analog/rn64%r1"
   test "analog/rn64%r2"
   test "analog/rn20%r1"
   test "analog/rn20%r2"
   test "analog/rn27%r2"
   test "analog/rn28%r2"
   test "analog/rn29%r1"
   test "analog/rn31%r2"
   test "analog/rn56%r1"
   test "analog/rn56%r3"
   test "analog/rn56%r4"
   test "analog/rn57%r1"
   test "analog/rn57%r2"
   test "analog/rn57%r3"
   test "analog/rn57%r4"
   test "analog/rn58%r1"
   test "analog/rn58%r2"
   test "analog/rn58%r3"
   test "analog/rn58%r4"
   test "analog/rn59%r1"
   test "analog/rn59%r3"
   test "analog/rn59%r4"
   test "analog/rn60%r1"
   test "analog/rn60%r2"
   test "analog/rn60%r3"
   test "analog/rn61%r1"
   test "analog/rn61%r3"
   test "analog/rn61%r4"
   test "analog/rn65%r1-8"
   test "analog/rn66%r1-8"
   test "analog/rn66%r3-6"
   test "analog/q1%q1"
   test "analog/q2%q1"
   test "analog/q4%q1"
   test "analog/q14%q1"
   test "analog/q17%q1"
   test "analog/q19%q1"
   test "analog/q27%q1"
   test "analog/q28%q1"
   test "analog/q33%q1"
   test "analog/q36%q1"
   test "analog/q41%q1"
   test "analog/q3%q1"
   test "analog/q13%q1"
   test "analog/q21%q1"
   test "analog/q23%q1"
   test "analog/q43%q1"
subend

sub TestJet (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "testjet"
subend

sub Polarity_Check (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Connect_Check (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Analog_Cluster_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Setup_Power_Supplies (Status_Code, Message$)
global Status
global Pslimit

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   cps
   sps 2,19.00,0.80;optimize
   sps 3,19.00,0.80;optimize
   Pslimit = pslimit
   pass device
   if Pslimit then
      dps
      fail device
      I = 1
      for Pscount = 1 to 3
         if binand (Pslimit,I) then
            report "Power Supply Number "
            report Pscount
            report "In Current Limit"
         end if
         I = 2*I
      next Pscount
      report "________________________________________"
      report "Check for backwards"
      report "IC's or Capacitors."
      report "________________________________________"
   end if
subend

sub Cycle_Power_On_Board
   sps 2,-0.00,0.00;optimize ! Setting supply output to zero
   sps 3,-0.00,0.00;optimize ! Setting supply output to zero
   sps 2,19.00,0.80;optimize
   sps 3,19.00,0.80;optimize
subend

sub Disconnect_Power_On_Board
   dps
subend

sub BScan_Powered_Shorts_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub BScan_Interconnect_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub BScan_Incircuit_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub BScan_Silicon_Nails_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Digital_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "digital/u24"
!   test "digital/u27"  ! test commented in testorder
   test "digital/u28"
!   test "digital/u45"  ! test commented in testorder
!   test "digital/u51"  ! test commented in testorder
   test "digital/u52"
   test "digital/u54"
   test "digital/u61"
!   test "digital/u72"  ! test commented in testorder
!   test "digital/u73"  ! test commented in testorder
 ! Safeguard Inhibited - An Upstream Device Is Non-Digital
   test "digital/u60"
 ! Safeguard Inhibited - An Upstream Device Is Non-Digital
   test "digital/u71"
subend

sub Functional_Tests (Status_Code, Message$)
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
subend

sub Analog_Functional_Tests (Status_Code, Message$)
global Status

   if Message$ <> "" then  print tab(5);Message$
   Status = Status_Code
   test "analog/finn1"
   test "analog/finn2"
   test "analog/finn3"
   test "analog/q1%gnd"
   test "analog/q1%m123"
   test "analog/q1%m231"
   test "analog/q1%m312"
   test "analog/q1%on_off"
   test "analog/q2%gnd"
   test "analog/q2%m123"
   test "analog/q2%m231"
   test "analog/q2%m312"
   test "analog/q2%on_off"
   test "analog/q3%gnd"
   test "analog/q3%m123"
   test "analog/q3%m231"
   test "analog/q3%m312"
   test "analog/q3%on_off"
   test "analog/q4%gnd"
   test "analog/q4%m123"
   test "analog/q4%m231"
   test "analog/q4%m312"
   test "analog/q4%on_off"
   test "analog/q5%gnd"
   test "analog/q5%m123"
   test "analog/q5%m231"
   test "analog/q5%m312"
   test "analog/q5%on_off"
   test "analog/q6%gnd"
   test "analog/q6%m123"
   test "analog/q6%m231"
   test "analog/q6%m312"
   test "analog/q6%on_off"
   test "analog/q7%gnd"
   test "analog/q7%m123"
   test "analog/q7%m231"
   test "analog/q7%m312"
   test "analog/q7%on_off"
   test "analog/q8%gnd"
   test "analog/q8%m123"
   test "analog/q8%m231"
   test "analog/q8%m312"
   test "analog/q8%on_off"
   test "analog/q9%gnd"
   test "analog/q9%m123"
   test "analog/q9%m231"
   test "analog/q9%m312"
   test "analog/q9%on_off"
   test "analog/q10%gnd"
   test "analog/q10%m123"
   test "analog/q10%m231"
   test "analog/q10%m312"
   test "analog/q10%on_off"
   test "analog/q11%gnd"
   test "analog/q11%m123"
   test "analog/q11%m231"
   test "analog/q11%m312"
   test "analog/q11%on_off"
   test "analog/q12%gnd"
   test "analog/q12%m123"
   test "analog/q12%m231"
   test "analog/q12%m312"
   test "analog/q12%on_off"
   test "analog/q15%gnd"
   test "analog/q15%m123"
   test "analog/q15%m231"
   test "analog/q15%m312"
   test "analog/q15%on_off"
   test "analog/q16%gnd"
   test "analog/q16%m123"
   test "analog/q16%m231"
   test "analog/q16%m312"
   test "analog/q16%on_off"
   test "analog/q18%gnd"
   test "analog/q18%m123"
   test "analog/q18%m231"
   test "analog/q18%m312"
   test "analog/q18%on_off"
   test "analog/q20%gnd"
   test "analog/q20%m123"
   test "analog/q20%m231"
   test "analog/q20%m312"
   test "analog/q20%on_off"
!   test "analog/q22%gnd"  ! test commented in testorder
!   test "analog/q22%m123"  ! test commented in testorder
!   test "analog/q22%m231"  ! test commented in testorder
!   test "analog/q22%m312"  ! test commented in testorder
!   test "analog/q22%on_off"  ! test commented in testorder
   test "analog/q23%gnd"
   test "analog/q23%m123"
   test "analog/q23%m231"
   test "analog/q23%m312"
   test "analog/q23%on_off"
!   test "analog/q24%gnd"  ! test commented in testorder
!   test "analog/q24%m123"  ! test commented in testorder
!   test "analog/q24%m231"  ! test commented in testorder
!   test "analog/q24%m312"  ! test commented in testorder
!   test "analog/q24%on_off"  ! test commented in testorder
   test "analog/q26%gnd"
   test "analog/q26%m123"
   test "analog/q26%m231"
   test "analog/q26%m312"
   test "analog/q26%on_off"
   test "analog/q27%gnd"
   test "analog/q27%m123"
   test "analog/q27%m231"
   test "analog/q27%m312"
   test "analog/q27%on_off"
   test "analog/q28%gnd"
   test "analog/q28%m123"
   test "analog/q28%m231"
   test "analog/q28%m312"
   test "analog/q28%on_off"
!   test "analog/q29%gnd"  ! test commented in testorder
!   test "analog/q29%m123"  ! test commented in testorder
!   test "analog/q29%m231"  ! test commented in testorder
!   test "analog/q29%m312"  ! test commented in testorder
!   test "analog/q29%on_off"  ! test commented in testorder
!   test "analog/q30%gnd"  ! test commented in testorder
!   test "analog/q30%m123"  ! test commented in testorder
!   test "analog/q30%m231"  ! test commented in testorder
!   test "analog/q30%m312"  ! test commented in testorder
!   test "analog/q30%on_off"  ! test commented in testorder
!   test "analog/q31%gnd"  ! test commented in testorder
!   test "analog/q31%m123"  ! test commented in testorder
!   test "analog/q31%m231"  ! test commented in testorder
!   test "analog/q31%m312"  ! test commented in testorder
!   test "analog/q31%on_off"  ! test commented in testorder
   test "analog/q32%gnd"
   test "analog/q32%m123"
   test "analog/q32%m231"
   test "analog/q32%m312"
   test "analog/q32%on_off"
   test "analog/q34%gnd"
   test "analog/q34%m123"
   test "analog/q34%m231"
   test "analog/q34%m312"
   test "analog/q34%on_off"
   test "analog/q35%gnd"
   test "analog/q35%m123"
   test "analog/q35%m231"
   test "analog/q35%m312"
   test "analog/q35%on_off"
   test "analog/q36%gnd"
   test "analog/q36%m123"
   test "analog/q36%m231"
   test "analog/q36%m312"
   test "analog/q36%on_off"
   test "analog/q38%gnd"
   test "analog/q38%m123"
   test "analog/q38%m231"
   test "analog/q38%m312"
   test "analog/q38%on_off"
   test "analog/q39%gnd"
   test "analog/q39%m123"
   test "analog/q39%m231"
   test "analog/q39%m312"
   test "analog/q39%on_off"
   test "analog/q40%gnd"
   test "analog/q40%m123"
   test "analog/q40%m231"
   test "analog/q40%m312"
   test "analog/q40%on_off"
   test "analog/q41%gnd"
   test "analog/q41%m123"
   test "analog/q41%m231"
   test "analog/q41%m312"
   test "analog/q41%on_off"
   test "analog/q42%gnd"
   test "analog/q42%m123"
   test "analog/q42%m231"
   test "analog/q42%m312"
   test "analog/q42%on_off"
   test "analog/q44%gnd"
   test "analog/q44%m123"
   test "analog/q44%m231"
   test "analog/q44%m312"
   test "analog/q44%on_off"
   test "analog/q46%gnd"
   test "analog/q46%m123"
   test "analog/q46%m231"
   test "analog/q46%m312"
   test "analog/q46%on_off"
   test "analog/q47%gnd"
   test "analog/q47%m123"
   test "analog/q47%m231"
   test "analog/q47%m312"
   test "analog/q47%on_off"
   test "analog/q48%gnd"
   test "analog/q48%m123"
   test "analog/q48%m231"
   test "analog/q48%m312"
   test "analog/q48%on_off"
   test "analog/q49%g216"
   test "analog/q49%g534"
   test "analog/q49%u216"
   test "analog/q49%u534"
   test "analog/q50%g216"
   test "analog/q50%g534"
   test "analog/q50%u216"
   test "analog/q50%u534"
   test "analog/u1%a41"
   test "analog/u1%a48"
   test "analog/u1%ad418"
   test "analog/u1%ad481"
   test "analog/u1%gnd"
   test "analog/u1%on_off"
   test "analog/u2%a41"
   test "analog/u2%a48"
   test "analog/u2%ad418"
   test "analog/u2%ad481"
   test "analog/u2%gnd"
   test "analog/u2%on_off"
   test "analog/u3"
   test "analog/u4%a41"
   test "analog/u4%a48"
   test "analog/u4%ad418"
   test "analog/u4%ad481"
   test "analog/u4%gnd"
   test "analog/u4%on_off"
   test "analog/u5%a41"
   test "analog/u5%a48"
   test "analog/u5%ad418"
   test "analog/u5%ad481"
   test "analog/u5%gnd"
   test "analog/u5%on_off"
   test "analog/u8%g216"
   test "analog/u8%g534"
   test "analog/u8%u216"
   test "analog/u8%u534"
   test "analog/u9"
   test "analog/u12%g216"
   test "analog/u12%g534"
   test "analog/u12%u216"
   test "analog/u12%u534"
   test "analog/u13%a41"
   test "analog/u13%a48"
   test "analog/u13%ad418"
   test "analog/u13%ad481"
   test "analog/u13%gnd"
   test "analog/u13%on_off"
   test "analog/u14"
   test "analog/u15%a41"
   test "analog/u15%a48"
   test "analog/u15%ad418"
   test "analog/u15%ad481"
   test "analog/u15%gnd"
   test "analog/u15%on_off"
   test "analog/u16%g216"
   test "analog/u16%g534"
   test "analog/u16%u216"
   test "analog/u16%u534"
   test "analog/u20"
   test "analog/u23%a41"
   test "analog/u23%a48"
   test "analog/u23%ad418"
   test "analog/u23%ad481"
   test "analog/u23%gnd"
   test "analog/u23%on_off"
   test "analog/u25"
   test "analog/u32%g216"
   test "analog/u32%g534"
   test "analog/u32%u216"
   test "analog/u32%u534"
   test "analog/u33%g216"
   test "analog/u33%g534"
   test "analog/u33%u216"
   test "analog/u33%u534"
   test "analog/u34"
   test "analog/u35%a41"
   test "analog/u35%a48"
   test "analog/u35%ad418"
   test "analog/u35%ad481"
   test "analog/u35%gnd"
   test "analog/u35%on_off"
   test "analog/u36"
   test "analog/u37%a41"
   test "analog/u37%a48"
   test "analog/u37%ad418"
   test "analog/u37%ad481"
   test "analog/u37%gnd"
   test "analog/u37%on_off"
   test "analog/u38%a41"
   test "analog/u38%a48"
   test "analog/u38%ad418"
   test "analog/u38%ad481"
   test "analog/u38%gnd"
   test "analog/u38%on_off"
   test "analog/u39%a41"
   test "analog/u39%a48"
   test "analog/u39%ad418"
   test "analog/u39%ad481"
   test "analog/u39%gnd"
   test "analog/u39%on_off"
   test "analog/u40"
   test "analog/u41%a41"
   test "analog/u41%a48"
   test "analog/u41%ad418"
   test "analog/u41%ad481"
   test "analog/u41%gnd"
   test "analog/u41%on_off"
   test "analog/u42%a41"
   test "analog/u42%a48"
   test "analog/u42%ad418"
   test "analog/u42%ad481"
   test "analog/u42%gnd"
   test "analog/u42%on_off"
   test "analog/u43"
   test "analog/u44%a41"
   test "analog/u44%a48"
   test "analog/u44%ad418"
   test "analog/u44%ad481"
   test "analog/u44%gnd"
   test "analog/u44%on_off"
   test "analog/u46%a41"
   test "analog/u46%a48"
   test "analog/u46%ad418"
   test "analog/u46%ad481"
   test "analog/u46%gnd"
   test "analog/u46%on_off"
   test "analog/u48%a41"
   test "analog/u48%a48"
   test "analog/u48%ad418"
   test "analog/u48%ad481"
   test "analog/u48%gnd"
   test "analog/u48%on_off"
   test "analog/u49%a41"
   test "analog/u49%a48"
   test "analog/u49%ad418"
   test "analog/u49%ad481"
   test "analog/u49%gnd"
   test "analog/u49%on_off"
   test "analog/u50%a41"
   test "analog/u50%a48"
   test "analog/u50%ad418"
   test "analog/u50%ad481"
   test "analog/u50%gnd"
   test "analog/u50%on_off"
   test "analog/u53"
   test "analog/u56%a41"
   test "analog/u56%a48"
   test "analog/u56%ad418"
   test "analog/u56%ad481"
   test "analog/u56%gnd"
   test "analog/u56%on_off"
   test "analog/u58%a41"
   test "analog/u58%a48"
   test "analog/u58%ad418"
   test "analog/u58%ad481"
   test "analog/u58%gnd"
   test "analog/u58%on_off"
   test "analog/u59"
   test "analog/u62"
   test "analog/u63%a41"
   test "analog/u63%a48"
   test "analog/u63%ad418"
   test "analog/u63%ad481"
   test "analog/u63%gnd"
   test "analog/u63%on_off"
   test "analog/u64%a41"
   test "analog/u64%a48"
   test "analog/u64%ad418"
   test "analog/u64%ad481"
   test "analog/u64%gnd"
   test "analog/u64%on_off"
   test "analog/u65%a41"
   test "analog/u65%a48"
   test "analog/u65%ad418"
   test "analog/u65%ad481"
   test "analog/u65%gnd"
   test "analog/u65%on_off"
   test "analog/u66%a41"
   test "analog/u66%a48"
   test "analog/u66%ad418"
   test "analog/u66%ad481"
   test "analog/u66%gnd"
   test "analog/u66%on_off"
   test "analog/u67%a41"
   test "analog/u67%a48"
   test "analog/u67%ad418"
   test "analog/u67%ad481"
   test "analog/u67%gnd"
   test "analog/u67%on_off"
   test "analog/u68%a41"
   test "analog/u68%a48"
   test "analog/u68%ad418"
   test "analog/u68%ad481"
   test "analog/u68%gnd"
   test "analog/u68%on_off"
   test "analog/u69"
   test "analog/u74%g216"
   test "analog/u74%g534"
   test "analog/u74%u216"
   test "analog/u74%u534"
   test "analog/u75%gnd"
   test "analog/u75%on_off"
   test "analog/u76%a41"
   test "analog/u76%a48"
   test "analog/u76%ad418"
   test "analog/u76%ad481"
   test "analog/u76%gnd"
   test "analog/u76%on_off"
   test "analog/x1"
   test "analog/x2"
!   test "analog/x3"  ! test commented in testorder
!   test "analog/x4"  ! test commented in testorder
!   test "analog/x5"  ! test commented in testorder
   test "mixed/u29"
subend

sub Program_Flash (Device$, Status_Code, Message$)
global Status
global Report_level$, Logging

  if Device$ = "" then  subexit
  if Message$ <> "" then  print tab(5);Message$
  Status = Status_Code

  ! Verify Manufacturer ID and device ID codes.
  ! The ID test should be executed in digital for ICT purposes.
  test "digital/" & Device$ & "%id"
  if dutfailed then
    print tab(15); Device$; " : Device ID failed"
    subexit ! if the wrong device is installed, exit the program subroutine
  end if

  !remove reporting and logging while verifying device status
  Report_level$ = rli$
  report level is none
  if Logging then
    log level is none
  end if
  print tab(8); "Verifying Status"
  safeguard none  !flash! This board meets design for On-Board Programming
                  !       criteria for safeguard none to be safe
                  !       Programming runs very slowly with safeguard on

  !flash! Comment the appropriate crc test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%crc"
  if not dutfailed then
    print tab(15); Device$; " : Device pre-programmed"
    call Cleanup_Flash
    subexit  ! the device is already properly programmed, exit subroutine
  else
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Contains incorrect data"
  end if

  ! Verify device is blank.
  !flash! Comment the appropriate blank test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%blank"
  if dutfailed then
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Not blank"
    print tab(8); "Erasing"
    !flash! call Setup_Power_Supplies_Program  ! add any necessary programming
                                               ! voltages to a new subroutine
    !flash! Comment the appropriate erase test(s) in Digital_Tests subroutine
    test "digital/" & Device$ & "%erase"
    if not dutfailed then
      print tab(8); "Erase complete"
    end if
  end if
  ! Some older devices may need two erase sequences. If erase fails
  ! twice on only one board, continue to program all. The final CRC
  ! check will determine the viability of the erase program sequence

  if dutfailed then
    pass device  ! clears dutfailed, boardfailed if only failure
    print tab(15); Device$; " : Needed to be erased twice"
    test "digital/" & Device$ & "%erase"
    if dutfailed then
      call Cleanup_Flash   !flash! move above erase test if full report
                           !       of failing erase tests is desired
      print tab(15); Device$; " : Erase Failed"
      subexit  ! if the device cannot be erased
    end if          !if dutfailed second erase
    print tab(8); "Erase complete"
  end if            !if dutfailed first erase
  print tab(8); "Programming"
  A=msec
  !flash! Comment the appropriate program test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%program"
  B = (msec-A)/1000
  if not dutfailed then
    print tab(15); "Programming complete in"; B;" seconds"
  else
    print tab(15); "Programming Failed"
    pass device
  end if
  !flash! call Setup_Power_Supplies (Failed_In_Power_Supplies, PowerMsg$)
  !flash! if dutfailed then
  !flash!   print "Power supplies limited"
  !flash!   call Cleanup_Flash
  !flash!   subexit
  !flash! end if
  call Cleanup_Flash  !flash! move above program test for full reporting
  print tab(8); "Verifying Data"
  !flash! Comment the appropriate crc test(s) in Digital_Tests subroutine
  test "digital/" & Device$ & "%crc"
  if dutfailed then
    print tab(15); Device$; " : Contains incorrect data"
  else
    print tab(15); Device$; " : Contains correct data"
  end if
subend

def fnPinsfailed (Message$)

   if Message$ <> "" then  print tab(5);Message$
   Pins_failed_flag = 0
   test "pins"
   if dutfailed then Pins_failed_flag = 1
   return Pins_failed_flag
fnend

sub ScanWorks_Setup
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
   testhead cleanup
subend

sub ScanWorks_Pretest
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status, Failed_In_SW_Testing

!   Status = Failed_In_SW_Testing
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Cleanup
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
   scanworks reset
subend

sub ScanWorks_Scan_Path_Verify_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Interconnect_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Mem_Interconnect_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Cluster_Tests (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Mem_BIST (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Device_Programming (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

sub ScanWorks_Flash_Programming (Status_Code, Message$)
! CAUTION:  Within this subroutine, do NOT use testhead statements
! CAUTION:  with the exception of the following statements:
! CAUTION:  testhead cleanup, test scanworks, scanworks reset.
! CAUTION:  Failure to follow this guideline can result in damage
! CAUTION:  to the BSI card.
global Status

!   if Message$ <> "" then  print tab(5);Message$
!   Status = Status_Code
!   call ScanWorks_Setup
!   call ScanWorks_Cleanup
subend

! End of Testplan Writer Generated Testplan.

